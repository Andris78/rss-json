{
  "version": "https://jsonfeed.org/version/1",
  "title": "DEV Community",
  "home_page_url": "https://dev.to/",
  "description": "A constructive and inclusive social network for software developers. With you every step of your journey.",
  "items": [
    {
      "guid": "https://dev.to/bekbrace/jwt-authentication-with-fastapi-3hja",
      "url": "https://dev.to/bekbrace/jwt-authentication-with-fastapi-3hja",
      "title": "JWT Authentication with FastAPI",
      "content_html": "<p>FastAPI : a great framework for creating APIs, it takes very small effort to realize how fast it is in comparison with other frameworks like Flask, Pyramid, bottle, tornado and Django.</p>\n\n<p>Developers are switching from Flask to FastAPI for a lot of reasons like speed, for instance.</p>\n\n<p>This is techempower.com, an independent website that benchmarks web servers by running a variety of tests on them, FastAPI (with Uvicorn, the ASGI server implementation) is one of the fastest web servers.<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fnllS7Rj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhv1kmdw5gorhe5n6q0c.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fnllS7Rj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhv1kmdw5gorhe5n6q0c.png\" alt=\"Image description\" width=\"880\" height=\"274\"></a><br>\nThis is a performance comparison executing fundamental tasks such as JSON serialization, database access, and server-side template composition. Each framework is operating in a realistic production configuration.</p>\n\n<p>And why I prefer FastAPI over others Fws is because of its high performance, ease of syntax, you have something like Pydantic that allows modern python typing, also asynchronous requests with Async/Await syntax .. and no wonder that FastAPI is on par with Go language and Node JS (which is built on the V8 engine, the same engine of Google Chrome)</p>\n\n<p>Take a look at my latest video on the channel where you can learn how to build user authentication with web based tokens using JWTs ( pronounce Jots) or JSON Web Tokens; and how this is better than the traditional cookie based sessions</p>\n\n<p><iframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/0_seNFCtglk\">\n</iframe>\n</p>\n\n<p>Thank you for reading ( and maybe watching :) )<br>\nI will see you in next Video posts, till then stay safe and be well, friends</p>",
      "summary": "<p>FastAPI : a great framework for creating APIs, it takes very small effort to realize how fast it is in comparison with other frameworks like Flask, Pyramid, bottle, tornado and Django.</p>\n\n<p>Developers are switching from Flask to FastAPI for a lot of reasons like speed, for instance.</p>\n\n<p>This is techempower.com, an independent website that benchmarks web servers by running a variety of tests on them, FastAPI (with Uvicorn, the ASGI server implementation) is one of the fastest web servers.<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fnllS7Rj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhv1kmdw5gorhe5n6q0c.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--fnllS7Rj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhv1kmdw5gorhe5n6q0c.png\" alt=\"Image description\" width=\"880\" height=\"274\"></a><br>\nThis is a performance comparison executing fundamental tasks such as JSON serialization, database access, and server-side template composition. Each framework is operating in a realistic production configuration.</p>\n\n<p>And why I prefer FastAPI over others Fws is because of its high performance, ease of syntax, you have something like Pydantic that allows modern python typing, also asynchronous requests with Async/Await syntax .. and no wonder that FastAPI is on par with Go language and Node JS (which is built on the V8 engine, the same engine of Google Chrome)</p>\n\n<p>Take a look at my latest video on the channel where you can learn how to build user authentication with web based tokens using JWTs ( pronounce Jots) or JSON Web Tokens; and how this is better than the traditional cookie based sessions</p>\n\n<p><iframe width=\"710\" height=\"399\" src=\"https://www.youtube.com/embed/0_seNFCtglk\">\n</iframe>\n</p>\n\n<p>Thank you for reading ( and maybe watching :) )<br>\nI will see you in next Video posts, till then stay safe and be well, friends</p>",
      "date_published": "2021-11-07T07:40:40.000Z",
      "author": {
        "name": "Bek Brace"
      }
    },
    {
      "guid": "https://dev.to/shubhamtiwari909/icons-with-react-icons-library-ke0",
      "url": "https://dev.to/shubhamtiwari909/icons-with-react-icons-library-ke0",
      "title": "Icons with React-icons library",
      "content_html": "<p>Hello Guys today i am going to show a great library for icons in React.</p>\n\n<p>React Icons - <br>\nReact icons are easy to use and it has a large variety of icons including bootstrap , fevicon , ant-design, ionicons 4 and 5 , Font-awesome etc all in one place.</p>\n\n<p>Installation -<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm install react-icons --save\n</code></pre>\n\n</div>\n\n\n\n<p>import -<br>\nimport {icon_name} from 'react-icons/icon_type'<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">CgDarkMode</span><span class=\"p\">,</span><span class=\"nx\">CgSun</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-icons/cg</span><span class=\"dl\">'</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Here icon names are CgDarkMode and CgSun and icon type is cg which represents css.gg icons.</p>\n\n<p>Usage -<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"o\">&lt;</span><span class=\"nx\">CgDarkMode</span> <span class=\"nx\">color</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">white</span><span class=\"dl\">'</span> <span class=\"nx\">size</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">5rem</span><span class=\"dl\">'</span> <span class=\"o\">/&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>We have used the icon as a tag here and it has two attributes color which sets the color of the icon and size which sets the size of the icon how large it will look on the screen.</p>\n\n<p>Dark mode Toggle Example with React icons -<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,{</span><span class=\"nx\">useState</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">CgDarkMode</span><span class=\"p\">,</span><span class=\"nx\">CgSun</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-icons/cg</span><span class=\"dl\">'</span>\n<span class=\"k\">import</span> <span class=\"dl\">'</span><span class=\"s1\">./App.css</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">(){</span>\n\n<span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">mode</span><span class=\"p\">,</span> <span class=\"nx\">setMode</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">toggleMode</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">setMode</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">mode</span><span class=\"p\">);</span>\n\n<span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">text-center my-5</span><span class=\"dl\">'</span><span class=\"o\">&gt;</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">btn btn-dark text-light mx-5</span><span class=\"dl\">'</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">toggleMode</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">mode</span> <span class=\"p\">?</span> <span class=\"dl\">'</span><span class=\"s1\">Light mode</span><span class=\"dl\">'</span> <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Dark mode</span><span class=\"dl\">'</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/button</span><span class=\"err\">&gt;\n</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">togglemode</span><span class=\"dl\">'</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{{</span><span class=\"na\">color</span><span class=\"p\">:</span><span class=\"nx\">mode</span> <span class=\"p\">?</span> <span class=\"dl\">'</span><span class=\"s1\">white</span><span class=\"dl\">'</span> <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">black</span><span class=\"dl\">'</span><span class=\"p\">,</span><span class=\"na\">backgroundColor</span><span class=\"p\">:</span><span class=\"nx\">mode</span> <span class=\"p\">?</span> <span class=\"dl\">'</span><span class=\"s1\">black</span><span class=\"dl\">'</span><span class=\"p\">:</span><span class=\"dl\">'</span><span class=\"s1\">white</span><span class=\"dl\">'</span><span class=\"p\">,</span><span class=\"na\">padding</span><span class=\"p\">:</span><span class=\"dl\">'</span><span class=\"s1\">1rem</span><span class=\"dl\">'</span><span class=\"p\">}}</span><span class=\"o\">&gt;</span>  \n            <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{{</span><span class=\"na\">margin</span><span class=\"p\">:</span><span class=\"dl\">'</span><span class=\"s1\">0 2rem</span><span class=\"dl\">'</span><span class=\"p\">}}</span><span class=\"o\">&gt;</span>\n                    <span class=\"p\">{</span> <span class=\"nx\">mode</span> <span class=\"p\">?</span>\n                    <span class=\"o\">&lt;</span><span class=\"nx\">CgDarkMode</span> <span class=\"nx\">color</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">white</span><span class=\"dl\">'</span> <span class=\"nx\">size</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">5rem</span><span class=\"dl\">'</span> <span class=\"o\">/&gt;</span>\n                    <span class=\"p\">:</span>\n                    <span class=\"o\">&lt;</span><span class=\"nx\">CgSun</span> <span class=\"nx\">color</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">yellow</span><span class=\"dl\">'</span> <span class=\"nx\">size</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">5rem</span><span class=\"dl\">'</span> <span class=\"o\">/&gt;</span>\n                    <span class=\"p\">}</span>\n            <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>            <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>\n                <span class=\"nx\">Veniam</span> <span class=\"nx\">ex</span> <span class=\"nx\">cillum</span> <span class=\"nx\">consectetur</span> <span class=\"nx\">veniam</span> <span class=\"nx\">laboris</span> <span class=\"nx\">consequat</span> <span class=\"nx\">commodo</span> <span class=\"nx\">esse</span> <span class=\"nx\">aliquip</span> <span class=\"nx\">id</span> <span class=\"nx\">deserunt</span> <span class=\"nx\">veniam</span> <span class=\"nx\">culpa</span><span class=\"p\">.</span> \n                <span class=\"nx\">Laborum</span> <span class=\"nx\">pariatur</span> <span class=\"nx\">laboris</span> <span class=\"nx\">nisi</span> <span class=\"nx\">occaecat</span> <span class=\"nx\">cupidatat</span> <span class=\"nx\">amet</span> <span class=\"nx\">qui</span> <span class=\"nx\">ut</span> <span class=\"nx\">tempor</span> <span class=\"nx\">adipisicing</span> <span class=\"nx\">elit</span> <span class=\"nx\">ea</span> <span class=\"nx\">sit</span><span class=\"p\">.</span> \n                <span class=\"nx\">Dolore</span> <span class=\"nx\">cupidatat</span> <span class=\"nx\">deserunt</span> <span class=\"nx\">enim</span> <span class=\"nx\">laborum</span> <span class=\"nx\">magna</span> <span class=\"nx\">duis</span> <span class=\"nx\">veniam</span> <span class=\"nx\">aliqua</span> <span class=\"nx\">eiusmod</span> <span class=\"nx\">consequat</span> <span class=\"nx\">ullamco</span> <span class=\"nx\">nulla</span> <span class=\"nx\">duis</span> <span class=\"nx\">mollit</span><span class=\"p\">.</span> \n                <span class=\"nx\">Minim</span> <span class=\"nx\">Lorem</span> <span class=\"nx\">officia</span> <span class=\"nx\">nostrud</span> <span class=\"nx\">officia</span> <span class=\"nx\">ad</span> <span class=\"nx\">cupidatat</span><span class=\"p\">.</span> <span class=\"nx\">Sunt</span> <span class=\"k\">do</span> <span class=\"nx\">consequat</span> <span class=\"nx\">mollit</span> <span class=\"nx\">qui</span> <span class=\"nx\">velit</span> <span class=\"k\">do</span> <span class=\"nx\">fugiat</span> <span class=\"nx\">officia</span> <span class=\"nx\">esse</span>\n                 <span class=\"nx\">excepteur</span> <span class=\"k\">do</span> <span class=\"nx\">pariatur</span> <span class=\"nx\">incididunt</span> <span class=\"nx\">ex</span><span class=\"p\">.</span> <span class=\"nx\">Fugiat</span> <span class=\"nx\">voluptate</span> <span class=\"nx\">id</span> <span class=\"nx\">ea</span> <span class=\"nx\">elit</span> <span class=\"nx\">non</span> <span class=\"nx\">minim</span> <span class=\"nx\">fugiat</span> <span class=\"nx\">sit</span> <span class=\"nx\">velit</span><span class=\"p\">.</span> <span class=\"nx\">Dolore</span> <span class=\"nx\">mollit</span> \n                 <span class=\"nx\">sunt</span> <span class=\"nx\">labore</span> <span class=\"nx\">quis</span> <span class=\"nx\">sunt</span> <span class=\"nx\">ad</span> <span class=\"nx\">eiusmod</span> <span class=\"nx\">commodo</span> <span class=\"nx\">mollit</span> <span class=\"nx\">veniam</span> <span class=\"nx\">sunt</span><span class=\"p\">.</span>\n            <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>I have used these icons with conditonal rendering , when the mode is set to true the dark mode will get enable and when the mode is set to false the dark mode will be off.</p>\n\n<p>NOTE - I have used bootstrap also in this example so, add bootstrap either using cdn or using npm.</p>\n\n<p>THANK YOU FOR READING THIS POST AND IF YOU FIND ANY MISTAKE OR WANTS TO GIVE ANY SUGGESTION PLEASE MENTION IT IN THE COMMENT SECTION</p>\n\n<p>React Icons official Site - <a href=\"https://react-icons.github.io/react-icons\">https://react-icons.github.io/react-icons</a></p>",
      "summary": "<p>Hello Guys today i am going to show a great library for icons in React.</p>\n\n<p>React Icons - <br>\nReact icons are easy to use and it has a large variety of icons including bootstrap , fevicon , ant-design, ionicons 4 and 5 , Font-awesome etc all in one place.</p>\n\n<p>Installation -<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm install react-icons --save\n</code></pre>\n\n</div>\n\n\n\n<p>import -<br>\nimport {icon_name} from 'react-icons/icon_type'<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">CgDarkMode</span><span class=\"p\">,</span><span class=\"nx\">CgSun</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-icons/cg</span><span class=\"dl\">'</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Here icon names are CgDarkMode and CgSun and icon type is cg which represents css.gg icons.</p>\n\n<p>Usage -<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"o\">&lt;</span><span class=\"nx\">CgDarkMode</span> <span class=\"nx\">color</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">white</span><span class=\"dl\">'</span> <span class=\"nx\">size</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">5rem</span><span class=\"dl\">'</span> <span class=\"o\">/&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>We have used the icon as a tag here and it has two attributes color which sets the color of the icon and size which sets the size of the icon how large it will look on the screen.</p>\n\n<p>Dark mode Toggle Example with React icons -<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,{</span><span class=\"nx\">useState</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">CgDarkMode</span><span class=\"p\">,</span><span class=\"nx\">CgSun</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-icons/cg</span><span class=\"dl\">'</span>\n<span class=\"k\">import</span> <span class=\"dl\">'</span><span class=\"s1\">./App.css</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">(){</span>\n\n<span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">mode</span><span class=\"p\">,</span> <span class=\"nx\">setMode</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">toggleMode</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">setMode</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">mode</span><span class=\"p\">);</span>\n\n<span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">text-center my-5</span><span class=\"dl\">'</span><span class=\"o\">&gt;</span>\n            <span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">btn btn-dark text-light mx-5</span><span class=\"dl\">'</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">toggleMode</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">mode</span> <span class=\"p\">?</span> <span class=\"dl\">'</span><span class=\"s1\">Light mode</span><span class=\"dl\">'</span> <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">Dark mode</span><span class=\"dl\">'</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/button</span><span class=\"err\">&gt;\n</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>\n        <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">togglemode</span><span class=\"dl\">'</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{{</span><span class=\"na\">color</span><span class=\"p\">:</span><span class=\"nx\">mode</span> <span class=\"p\">?</span> <span class=\"dl\">'</span><span class=\"s1\">white</span><span class=\"dl\">'</span> <span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">black</span><span class=\"dl\">'</span><span class=\"p\">,</span><span class=\"na\">backgroundColor</span><span class=\"p\">:</span><span class=\"nx\">mode</span> <span class=\"p\">?</span> <span class=\"dl\">'</span><span class=\"s1\">black</span><span class=\"dl\">'</span><span class=\"p\">:</span><span class=\"dl\">'</span><span class=\"s1\">white</span><span class=\"dl\">'</span><span class=\"p\">,</span><span class=\"na\">padding</span><span class=\"p\">:</span><span class=\"dl\">'</span><span class=\"s1\">1rem</span><span class=\"dl\">'</span><span class=\"p\">}}</span><span class=\"o\">&gt;</span>  \n            <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">style</span><span class=\"o\">=</span><span class=\"p\">{{</span><span class=\"na\">margin</span><span class=\"p\">:</span><span class=\"dl\">'</span><span class=\"s1\">0 2rem</span><span class=\"dl\">'</span><span class=\"p\">}}</span><span class=\"o\">&gt;</span>\n                    <span class=\"p\">{</span> <span class=\"nx\">mode</span> <span class=\"p\">?</span>\n                    <span class=\"o\">&lt;</span><span class=\"nx\">CgDarkMode</span> <span class=\"nx\">color</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">white</span><span class=\"dl\">'</span> <span class=\"nx\">size</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">5rem</span><span class=\"dl\">'</span> <span class=\"o\">/&gt;</span>\n                    <span class=\"p\">:</span>\n                    <span class=\"o\">&lt;</span><span class=\"nx\">CgSun</span> <span class=\"nx\">color</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">yellow</span><span class=\"dl\">'</span> <span class=\"nx\">size</span><span class=\"o\">=</span><span class=\"dl\">'</span><span class=\"s1\">5rem</span><span class=\"dl\">'</span> <span class=\"o\">/&gt;</span>\n                    <span class=\"p\">}</span>\n            <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>            <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>\n                <span class=\"nx\">Veniam</span> <span class=\"nx\">ex</span> <span class=\"nx\">cillum</span> <span class=\"nx\">consectetur</span> <span class=\"nx\">veniam</span> <span class=\"nx\">laboris</span> <span class=\"nx\">consequat</span> <span class=\"nx\">commodo</span> <span class=\"nx\">esse</span> <span class=\"nx\">aliquip</span> <span class=\"nx\">id</span> <span class=\"nx\">deserunt</span> <span class=\"nx\">veniam</span> <span class=\"nx\">culpa</span><span class=\"p\">.</span> \n                <span class=\"nx\">Laborum</span> <span class=\"nx\">pariatur</span> <span class=\"nx\">laboris</span> <span class=\"nx\">nisi</span> <span class=\"nx\">occaecat</span> <span class=\"nx\">cupidatat</span> <span class=\"nx\">amet</span> <span class=\"nx\">qui</span> <span class=\"nx\">ut</span> <span class=\"nx\">tempor</span> <span class=\"nx\">adipisicing</span> <span class=\"nx\">elit</span> <span class=\"nx\">ea</span> <span class=\"nx\">sit</span><span class=\"p\">.</span> \n                <span class=\"nx\">Dolore</span> <span class=\"nx\">cupidatat</span> <span class=\"nx\">deserunt</span> <span class=\"nx\">enim</span> <span class=\"nx\">laborum</span> <span class=\"nx\">magna</span> <span class=\"nx\">duis</span> <span class=\"nx\">veniam</span> <span class=\"nx\">aliqua</span> <span class=\"nx\">eiusmod</span> <span class=\"nx\">consequat</span> <span class=\"nx\">ullamco</span> <span class=\"nx\">nulla</span> <span class=\"nx\">duis</span> <span class=\"nx\">mollit</span><span class=\"p\">.</span> \n                <span class=\"nx\">Minim</span> <span class=\"nx\">Lorem</span> <span class=\"nx\">officia</span> <span class=\"nx\">nostrud</span> <span class=\"nx\">officia</span> <span class=\"nx\">ad</span> <span class=\"nx\">cupidatat</span><span class=\"p\">.</span> <span class=\"nx\">Sunt</span> <span class=\"k\">do</span> <span class=\"nx\">consequat</span> <span class=\"nx\">mollit</span> <span class=\"nx\">qui</span> <span class=\"nx\">velit</span> <span class=\"k\">do</span> <span class=\"nx\">fugiat</span> <span class=\"nx\">officia</span> <span class=\"nx\">esse</span>\n                 <span class=\"nx\">excepteur</span> <span class=\"k\">do</span> <span class=\"nx\">pariatur</span> <span class=\"nx\">incididunt</span> <span class=\"nx\">ex</span><span class=\"p\">.</span> <span class=\"nx\">Fugiat</span> <span class=\"nx\">voluptate</span> <span class=\"nx\">id</span> <span class=\"nx\">ea</span> <span class=\"nx\">elit</span> <span class=\"nx\">non</span> <span class=\"nx\">minim</span> <span class=\"nx\">fugiat</span> <span class=\"nx\">sit</span> <span class=\"nx\">velit</span><span class=\"p\">.</span> <span class=\"nx\">Dolore</span> <span class=\"nx\">mollit</span> \n                 <span class=\"nx\">sunt</span> <span class=\"nx\">labore</span> <span class=\"nx\">quis</span> <span class=\"nx\">sunt</span> <span class=\"nx\">ad</span> <span class=\"nx\">eiusmod</span> <span class=\"nx\">commodo</span> <span class=\"nx\">mollit</span> <span class=\"nx\">veniam</span> <span class=\"nx\">sunt</span><span class=\"p\">.</span>\n            <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>        <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">App</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>I have used these icons with conditonal rendering , when the mode is set to true the dark mode will get enable and when the mode is set to false the dark mode will be off.</p>\n\n<p>NOTE - I have used bootstrap also in this example so, add bootstrap either using cdn or using npm.</p>\n\n<p>THANK YOU FOR READING THIS POST AND IF YOU FIND ANY MISTAKE OR WANTS TO GIVE ANY SUGGESTION PLEASE MENTION IT IN THE COMMENT SECTION</p>\n\n<p>React Icons official Site - <a href=\"https://react-icons.github.io/react-icons\">https://react-icons.github.io/react-icons</a></p>",
      "date_published": "2021-11-07T07:10:36.000Z",
      "author": {
        "name": "Mysterio"
      }
    },
    {
      "guid": "https://dev.to/hardeepcoder/login-with-google-reactjs-234c",
      "url": "https://dev.to/hardeepcoder/login-with-google-reactjs-234c",
      "title": "Login with google - ReactJs",
      "content_html": "<p>Open App.js and import GoogleLogin from package<br>\nimport GoogleLogin from 'react-google-login';</p>\n\n<p>Now just add Google Login button with Client ID<br>\n\n    clientId=\"Your_own_client_ID.googleusercontent.com\"<br>\n    buttonText=\"Login with Google\"<br>\n    onSuccess={pass}<br>\n    onFailure={fail}<br>\n    cookiePolicy={'single_host_origin'}<br>\n  /&gt;                                                        </p>\n\n<p>Just add two handles for onSuccess <br>\nconst fail = (result) =&gt;{<br>\n      alert(result.error);<br>\n  }</p>\n\n<p>and for onFailure<br>\nconst pass = (googleData)=&gt;{<br>\n    console.log(googleData);<br>\n  }</p>\n\n<p>Read more: <a href=\"https://easycodesardar.blogspot.com/2021/11/login-with-google-reactjs.html\">https://easycodesardar.blogspot.com/2021/11/login-with-google-reactjs.html</a></p>",
      "summary": "<p>Open App.js and import GoogleLogin from package<br>\nimport GoogleLogin from 'react-google-login';</p>\n\n<p>Now just add Google Login button with Client ID<br>\n\n    clientId=\"Your_own_client_ID.googleusercontent.com\"<br>\n    buttonText=\"Login with Google\"<br>\n    onSuccess={pass}<br>\n    onFailure={fail}<br>\n    cookiePolicy={'single_host_origin'}<br>\n  /&gt;                                                        </p>\n\n<p>Just add two handles for onSuccess <br>\nconst fail = (result) =&gt;{<br>\n      alert(result.error);<br>\n  }</p>\n\n<p>and for onFailure<br>\nconst pass = (googleData)=&gt;{<br>\n    console.log(googleData);<br>\n  }</p>\n\n<p>Read more: <a href=\"https://easycodesardar.blogspot.com/2021/11/login-with-google-reactjs.html\">https://easycodesardar.blogspot.com/2021/11/login-with-google-reactjs.html</a></p>",
      "date_published": "2021-11-07T06:42:57.000Z",
      "author": {
        "name": "EasyCode Sardar"
      }
    },
    {
      "guid": "https://dev.to/ruppysuppy/5-tips-to-take-your-website-lighthouse-score-from-meh-to-wow-2375",
      "url": "https://dev.to/ruppysuppy/5-tips-to-take-your-website-lighthouse-score-from-meh-to-wow-2375",
      "title": "5 Tips to Take your Website Lighthouse Score from Meh to WOW!",
      "content_html": "<p>When creating a website for Production, you would want the world to have <em>a great experience using it</em>. One of the best tools for this purpose is the <strong>Lighthouse</strong>, a <strong>Chrome Dev-tool</strong> that analyses how various your site fares on different metrics.</p>\n\n<p>Sadly, pushing for a perfect <strong>Lighthouse</strong> score isn't easy. While creating my <a href=\"https://tapajyoti-bose.vercel.app\">portfolio website</a>, I started off with the following score:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yWXfDLpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/deamhja2wl9nmkia6ejv.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yWXfDLpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/deamhja2wl9nmkia6ejv.png\" alt=\"Initial Lighthouse Score\" width=\"454\" height=\"182\"></a></p>\n\n<p>But after following a few simple steps, I managed to take the score <em>in each category</em> to <strong>90+</strong></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IZyLnzIR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvbrdb9zzyif2zwucpmv.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IZyLnzIR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvbrdb9zzyif2zwucpmv.png\" alt=\"Current Lighthouse Score\" width=\"455\" height=\"182\"></a></p>\n\n<h1>\n  <a href=\"#1-use-responsive-images-amp-art-direction\">\n  </a>\n  1. Use Responsive Images &amp; Art Direction\n</h1>\n\n<p>The most often way to use images is to use:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"link-to-image\"</span><span class=\"nt\">&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>But there is are far more optimized methods to use images:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"c\">&lt;!-- Responsive images --&gt;</span>\n<span class=\"nt\">&lt;img</span>\n    <span class=\"na\">srcSet=</span><span class=\"s\">\"link-to-img 480w, link-to-img@2x 720w, link-to-img@3x 960w\"</span>\n    <span class=\"na\">sizes=</span><span class=\"s\">\"(max-width: 1200px) 480px, (max-width: 2560px) 720px, 960px\"</span>\n    <span class=\"na\">src=</span><span class=\"s\">\"imgUrl@3x\"</span>\n<span class=\"nt\">&gt;</span>\n\n<span class=\"c\">&lt;!-- Art Direction --&gt;</span>\n<span class=\"nt\">&lt;picture&gt;</span>\n    <span class=\"nt\">&lt;source</span> <span class=\"na\">media=</span><span class=\"s\">\"(max-width: 1200px)\"</span> <span class=\"na\">srcSet=</span><span class=\"s\">\"link-to-img\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;source</span> <span class=\"na\">media=</span><span class=\"s\">\"(max-width: 2560px)\"</span> <span class=\"na\">srcSet=</span><span class=\"s\">\"link-to-img@2x\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;source</span> <span class=\"na\">media=</span><span class=\"s\">\"(min-width: 2560px)\"</span> <span class=\"na\">srcSet=</span><span class=\"s\">\"link-to-imgl@3x\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"link-to-img@3x\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/picture&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Using these methods allows browsers to load up the images that are the <strong>most appropriate for the size of the screen you are using</strong>, often <em>saving it from downloading a huge amount of data unnecessarily</em>.</p>\n\n<p>To learn more about <strong>Responsive Images</strong> and <strong>Art Direction</strong>, check out the <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\">MDN Docs</a></p>\n\n<h1>\n  <a href=\"#2-use-server-side-rendering-and-lazy-loading\">\n  </a>\n  2. Use Server Side Rendering and Lazy Loading\n</h1>\n\n<p>My portfolio was initially made with <strong>React</strong> (bootstrapped with <code>create-react-app</code>), but since vanilla <strong>React</strong> is computed on <strong>Client-side</strong>, it hampers both <em>Performance</em> and <em>SEO</em>. Re-writing the entire website in <strong>Next.js</strong> provided some serious improvement to the Lighthouse Score.</p>\n\n<p>Another important concept is <strong>Lazy Loading</strong>. It is the style of programming that <em>defers the loading of resources till they are required</em>. This provides <strong>huge gains in performance</strong> during <em>the initial load of the website</em>. It's very easy to implement <strong>Lazy Loading</strong> in <strong>React</strong> based applications:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight jsx\"><code><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">lazy</span><span class=\"p\">,</span> <span class=\"nx\">Suspense</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">LazyComponent</span> <span class=\"o\">=</span> <span class=\"nx\">lazy</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">import</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./LazyComponent</span><span class=\"dl\">'</span><span class=\"p\">));</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">Component</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nc\">Suspense</span>\n          <span class=\"c1\">// fallback will be displayed while the lazy component loads</span>\n          <span class=\"na\">fallback</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>Loading...<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span><span class=\"si\">}</span>\n      <span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nc\">LazyComponent</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nc\">Suspense</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<h1>\n  <a href=\"#3-minify-your-resources\">\n  </a>\n  3. Minify your resources\n</h1>\n\n<p>It is always a good idea to <strong>minify</strong> the <strong>JavaScript</strong> and <strong>CSS</strong> in the production environment. It drastically reduces the size of the items to be loaded and also gets rid of unused code.</p>\n\n<p><strong>Webpack</strong> is a great tool for this purpose. It minimizes <strong>JavaScript</strong> by default in the Production environment. For other resources, like <strong>CSS</strong>, you can use additional plugins like the <code>css-minimizer-webpack-plugin</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">CssMinimizerPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">css-minimizer-webpack-plugin</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">module</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">rules</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"na\">test</span><span class=\"p\">:</span> <span class=\"sr\">/</span><span class=\"se\">\\.</span><span class=\"sr\">css$/</span><span class=\"p\">,</span>\n        <span class=\"na\">use</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">style-loader</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">css-loader</span><span class=\"dl\">\"</span><span class=\"p\">],</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">],</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">optimization</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">minimizer</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"k\">new</span> <span class=\"nx\">CssMinimizerPlugin</span><span class=\"p\">(),</span>\n    <span class=\"p\">],</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">};</span>\n\n</code></pre>\n\n</div>\n\n\n\n<p>To learn more about <strong>Webpack</strong>, checkout this <a href=\"https://dev.to/ruppysuppy/webpack-unpacked-a-pragmatic-guide-486f\">article</a></p>\n\n<h1>\n  <a href=\"#4-use-compressed-images\">\n  </a>\n  4. Use Compressed images\n</h1>\n\n<p>The <strong>next-gen</strong> image formats such as <strong>WebP</strong> can provide far better compression than a <strong>PNG</strong> or <strong>JPEG</strong>. This in turn means <em>faster downloads</em>, <em>less data consumption</em>, and <em>therefore, an overall faster site</em>.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gKwjY3IH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5nw8lq3shn38j145p8d.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gKwjY3IH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5nw8lq3shn38j145p8d.jpg\" alt=\"WebP vs JPEG\" width=\"880\" height=\"306\"></a></p>\n\n<p>You can also go with <em>vector graphics</em> format such as <strong>SVG</strong> instead of the commonly use <em>raster graphics</em> which too help tremendously in the domain of performance gains.</p>\n\n<h1>\n  <a href=\"#5-use-raw-alt-endraw-raw-arialabel-endraw-and-raw-arialabelledby-endraw-\">\n  </a>\n  5. Use <code>alt</code>, <code>aria-label</code>, and <code>aria-labelledby</code>\n</h1>\n\n<p>These tags help you improve the Website's <strong>Accessibility</strong>.</p>\n\n<ol>\n<li>\n<p><code>alt</code>: The <code>alt</code> attribute is the <strong>HTML</strong> attribute used in <strong>HTML</strong> documents to specify <em>alternative text that is to be rendered</em> when the element (generally images) to which it is applied cannot be rendered.<br>\n</p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"link-to-img\"</span> <span class=\"na\">alt=</span><span class=\"s\">\"image-description\"</span><span class=\"nt\">&gt;</span>\n</code></pre>\n\n</li>\n<li>\n<p><code>aria-label</code>: The <code>aria-label</code> attribute is used to define a string that labels the current element. <em>Use it in cases where a text label is not visible on the screen</em>.<br>\n</p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;button</span> <span class=\"na\">aria-label=</span><span class=\"s\">\"Close\"</span> <span class=\"na\">onclick=</span><span class=\"s\">\"dialog.close()\"</span><span class=\"nt\">&gt;</span>\n    X\n<span class=\"nt\">&lt;/button&gt;</span>\n</code></pre>\n\n</li>\n<li>\n<p><code>aria-labelledby</code>: Similar to the <code>aria-label</code> attribute, but it should be used <em>if there is visible text labeling the element</em>.<br>\n</p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">role=</span><span class=\"s\">\"dialog\"</span> <span class=\"na\">aria-labelledby=</span><span class=\"s\">\"dialog-header\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;h2</span> <span class=\"na\">id=</span><span class=\"s\">\"dialog-header\"</span><span class=\"nt\">&gt;</span>Choose a File<span class=\"nt\">&lt;/h2&gt;</span>\n    <span class=\"c\">&lt;!-- ... Dialog contents --&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n\n</li>\n</ol>\n\n<h1>\n  <a href=\"#wrapping-up\">\n  </a>\n  Wrapping Up\n</h1>\n\n<p>We went through some tricks to boost all aspects of the Lighthouse Score for your website. Use them on your website and witness the magic before your eyes.</p>\n\n<p>Wishing you a <strong>Perfect 100 Lighthouse Score</strong>!</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9vfgFSPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3dy5iicial84op70r8yb.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9vfgFSPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3dy5iicial84op70r8yb.gif\" alt=\"thumbs up\" width=\"241\" height=\"200\"></a></p>\n\n<h1>\n  <a href=\"#thanks-for-reading\">\n  </a>\n  Thanks for reading\n</h1>\n\n<p>Looking to become an overnight success? Check out my article on <br>\n<a href=\"https://tapajyotibose.medium.com/the-secret-sauce-for-overnight-success-239ee6d3972c\">Medium</a></p>\n\n<p>Need a <strong>Top Rated Front-End Development Freelancer</strong>? Contact me on <a href=\"https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/\">Upwork</a></p>\n\n<p>Want to see what I am working on? Check out my <a href=\"https://github.com/ruppysuppy\">GitHub</a></p>\n\n<p>I am a freelancer who will start off as a <strong>Digital Nomad</strong> in mid-2022. Want to catch the journey? Follow me on <a href=\"https://www.instagram.com/tapajyotib/\">Instagram</a></p>\n\n<p>Follow my blogs for <strong>Weekly new Tidbits</strong> on <a href=\"https://dev.to/ruppysuppy\">Dev</a></p>\n\n<p><strong>FAQ</strong></p>\n\n<p>These are a few commonly asked questions I get. So, I hope this <strong>FAQ</strong> section solves your issues.</p>\n\n<ol>\n<li>\n<p><strong>I am a beginner, how should I learn Front-End Web Dev?</strong><br>\nLook into the following articles:</p>\n\n<ol>\n<li><a href=\"https://dev.to/ruppysuppy/front-end-developer-roadmap-zero-to-hero-4pkf\">Front End Development Roadmap</a></li>\n<li><a href=\"https://dev.to/ruppysuppy/5-projects-to-master-front-end-development-57p\">Front End Project Ideas</a></li>\n</ol>\n\n\n</li>\n<li><p><strong>Would you mentor me?</strong><br><br>\nSorry, I am already under a lot of workload and would not have the time to mentor anyone.</p></li>\n<li><p><strong>Would you like to collaborate on our site?</strong><br><br>\nAs mentioned in the <em>previous question</em>, I am in a time crunch, so I would have to pass on such opportunities.</p></li>\n</ol>\n\n<p><strong>Connect to me on</strong></p>\n\n<ul>\n<li>  <a href=\"https://www.linkedin.com/in/tapajyoti-bose-429a601a0\">LinkedIn</a>\n</li>\n<li>  <a href=\"https://tapajyoti-bose.vercel.app\">Portfolio</a>\n</li>\n<li>  <a href=\"https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/\">Upwork</a>\n</li>\n<li>  <a href=\"https://github.com/ruppysuppy\">GitHub</a>\n</li>\n<li>  <a href=\"https://www.instagram.com/tapajyotib/\">Instagram</a>\n</li>\n</ul>",
      "summary": "<p>When creating a website for Production, you would want the world to have <em>a great experience using it</em>. One of the best tools for this purpose is the <strong>Lighthouse</strong>, a <strong>Chrome Dev-tool</strong> that analyses how various your site fares on different metrics.</p>\n\n<p>Sadly, pushing for a perfect <strong>Lighthouse</strong> score isn't easy. While creating my <a href=\"https://tapajyoti-bose.vercel.app\">portfolio website</a>, I started off with the following score:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yWXfDLpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/deamhja2wl9nmkia6ejv.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yWXfDLpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/deamhja2wl9nmkia6ejv.png\" alt=\"Initial Lighthouse Score\" width=\"454\" height=\"182\"></a></p>\n\n<p>But after following a few simple steps, I managed to take the score <em>in each category</em> to <strong>90+</strong></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IZyLnzIR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvbrdb9zzyif2zwucpmv.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--IZyLnzIR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvbrdb9zzyif2zwucpmv.png\" alt=\"Current Lighthouse Score\" width=\"455\" height=\"182\"></a></p>\n\n<h1>\n  <a href=\"#1-use-responsive-images-amp-art-direction\">\n  </a>\n  1. Use Responsive Images &amp; Art Direction\n</h1>\n\n<p>The most often way to use images is to use:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"link-to-image\"</span><span class=\"nt\">&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>But there is are far more optimized methods to use images:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"c\">&lt;!-- Responsive images --&gt;</span>\n<span class=\"nt\">&lt;img</span>\n    <span class=\"na\">srcSet=</span><span class=\"s\">\"link-to-img 480w, link-to-img@2x 720w, link-to-img@3x 960w\"</span>\n    <span class=\"na\">sizes=</span><span class=\"s\">\"(max-width: 1200px) 480px, (max-width: 2560px) 720px, 960px\"</span>\n    <span class=\"na\">src=</span><span class=\"s\">\"imgUrl@3x\"</span>\n<span class=\"nt\">&gt;</span>\n\n<span class=\"c\">&lt;!-- Art Direction --&gt;</span>\n<span class=\"nt\">&lt;picture&gt;</span>\n    <span class=\"nt\">&lt;source</span> <span class=\"na\">media=</span><span class=\"s\">\"(max-width: 1200px)\"</span> <span class=\"na\">srcSet=</span><span class=\"s\">\"link-to-img\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;source</span> <span class=\"na\">media=</span><span class=\"s\">\"(max-width: 2560px)\"</span> <span class=\"na\">srcSet=</span><span class=\"s\">\"link-to-img@2x\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;source</span> <span class=\"na\">media=</span><span class=\"s\">\"(min-width: 2560px)\"</span> <span class=\"na\">srcSet=</span><span class=\"s\">\"link-to-imgl@3x\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"link-to-img@3x\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/picture&gt;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Using these methods allows browsers to load up the images that are the <strong>most appropriate for the size of the screen you are using</strong>, often <em>saving it from downloading a huge amount of data unnecessarily</em>.</p>\n\n<p>To learn more about <strong>Responsive Images</strong> and <strong>Art Direction</strong>, check out the <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images\">MDN Docs</a></p>\n\n<h1>\n  <a href=\"#2-use-server-side-rendering-and-lazy-loading\">\n  </a>\n  2. Use Server Side Rendering and Lazy Loading\n</h1>\n\n<p>My portfolio was initially made with <strong>React</strong> (bootstrapped with <code>create-react-app</code>), but since vanilla <strong>React</strong> is computed on <strong>Client-side</strong>, it hampers both <em>Performance</em> and <em>SEO</em>. Re-writing the entire website in <strong>Next.js</strong> provided some serious improvement to the Lighthouse Score.</p>\n\n<p>Another important concept is <strong>Lazy Loading</strong>. It is the style of programming that <em>defers the loading of resources till they are required</em>. This provides <strong>huge gains in performance</strong> during <em>the initial load of the website</em>. It's very easy to implement <strong>Lazy Loading</strong> in <strong>React</strong> based applications:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight jsx\"><code><span class=\"k\">import</span> <span class=\"nx\">React</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">lazy</span><span class=\"p\">,</span> <span class=\"nx\">Suspense</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">LazyComponent</span> <span class=\"o\">=</span> <span class=\"nx\">lazy</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">import</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">./LazyComponent</span><span class=\"dl\">'</span><span class=\"p\">));</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">Component</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nc\">Suspense</span>\n          <span class=\"c1\">// fallback will be displayed while the lazy component loads</span>\n          <span class=\"na\">fallback</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>Loading...<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span><span class=\"si\">}</span>\n      <span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nc\">LazyComponent</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nc\">Suspense</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<h1>\n  <a href=\"#3-minify-your-resources\">\n  </a>\n  3. Minify your resources\n</h1>\n\n<p>It is always a good idea to <strong>minify</strong> the <strong>JavaScript</strong> and <strong>CSS</strong> in the production environment. It drastically reduces the size of the items to be loaded and also gets rid of unused code.</p>\n\n<p><strong>Webpack</strong> is a great tool for this purpose. It minimizes <strong>JavaScript</strong> by default in the Production environment. For other resources, like <strong>CSS</strong>, you can use additional plugins like the <code>css-minimizer-webpack-plugin</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">CssMinimizerPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">css-minimizer-webpack-plugin</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">module</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">rules</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"p\">{</span>\n        <span class=\"na\">test</span><span class=\"p\">:</span> <span class=\"sr\">/</span><span class=\"se\">\\.</span><span class=\"sr\">css$/</span><span class=\"p\">,</span>\n        <span class=\"na\">use</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">style-loader</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">css-loader</span><span class=\"dl\">\"</span><span class=\"p\">],</span>\n      <span class=\"p\">},</span>\n    <span class=\"p\">],</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">optimization</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">minimizer</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"k\">new</span> <span class=\"nx\">CssMinimizerPlugin</span><span class=\"p\">(),</span>\n    <span class=\"p\">],</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">};</span>\n\n</code></pre>\n\n</div>\n\n\n\n<p>To learn more about <strong>Webpack</strong>, checkout this <a href=\"https://dev.to/ruppysuppy/webpack-unpacked-a-pragmatic-guide-486f\">article</a></p>\n\n<h1>\n  <a href=\"#4-use-compressed-images\">\n  </a>\n  4. Use Compressed images\n</h1>\n\n<p>The <strong>next-gen</strong> image formats such as <strong>WebP</strong> can provide far better compression than a <strong>PNG</strong> or <strong>JPEG</strong>. This in turn means <em>faster downloads</em>, <em>less data consumption</em>, and <em>therefore, an overall faster site</em>.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gKwjY3IH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5nw8lq3shn38j145p8d.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gKwjY3IH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5nw8lq3shn38j145p8d.jpg\" alt=\"WebP vs JPEG\" width=\"880\" height=\"306\"></a></p>\n\n<p>You can also go with <em>vector graphics</em> format such as <strong>SVG</strong> instead of the commonly use <em>raster graphics</em> which too help tremendously in the domain of performance gains.</p>\n\n<h1>\n  <a href=\"#5-use-raw-alt-endraw-raw-arialabel-endraw-and-raw-arialabelledby-endraw-\">\n  </a>\n  5. Use <code>alt</code>, <code>aria-label</code>, and <code>aria-labelledby</code>\n</h1>\n\n<p>These tags help you improve the Website's <strong>Accessibility</strong>.</p>\n\n<ol>\n<li>\n<p><code>alt</code>: The <code>alt</code> attribute is the <strong>HTML</strong> attribute used in <strong>HTML</strong> documents to specify <em>alternative text that is to be rendered</em> when the element (generally images) to which it is applied cannot be rendered.<br>\n</p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"link-to-img\"</span> <span class=\"na\">alt=</span><span class=\"s\">\"image-description\"</span><span class=\"nt\">&gt;</span>\n</code></pre>\n\n</li>\n<li>\n<p><code>aria-label</code>: The <code>aria-label</code> attribute is used to define a string that labels the current element. <em>Use it in cases where a text label is not visible on the screen</em>.<br>\n</p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;button</span> <span class=\"na\">aria-label=</span><span class=\"s\">\"Close\"</span> <span class=\"na\">onclick=</span><span class=\"s\">\"dialog.close()\"</span><span class=\"nt\">&gt;</span>\n    X\n<span class=\"nt\">&lt;/button&gt;</span>\n</code></pre>\n\n</li>\n<li>\n<p><code>aria-labelledby</code>: Similar to the <code>aria-label</code> attribute, but it should be used <em>if there is visible text labeling the element</em>.<br>\n</p>\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;div</span> <span class=\"na\">role=</span><span class=\"s\">\"dialog\"</span> <span class=\"na\">aria-labelledby=</span><span class=\"s\">\"dialog-header\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;h2</span> <span class=\"na\">id=</span><span class=\"s\">\"dialog-header\"</span><span class=\"nt\">&gt;</span>Choose a File<span class=\"nt\">&lt;/h2&gt;</span>\n    <span class=\"c\">&lt;!-- ... Dialog contents --&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</code></pre>\n\n</li>\n</ol>\n\n<h1>\n  <a href=\"#wrapping-up\">\n  </a>\n  Wrapping Up\n</h1>\n\n<p>We went through some tricks to boost all aspects of the Lighthouse Score for your website. Use them on your website and witness the magic before your eyes.</p>\n\n<p>Wishing you a <strong>Perfect 100 Lighthouse Score</strong>!</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9vfgFSPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3dy5iicial84op70r8yb.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--9vfgFSPH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3dy5iicial84op70r8yb.gif\" alt=\"thumbs up\" width=\"241\" height=\"200\"></a></p>\n\n<h1>\n  <a href=\"#thanks-for-reading\">\n  </a>\n  Thanks for reading\n</h1>\n\n<p>Looking to become an overnight success? Check out my article on <br>\n<a href=\"https://tapajyotibose.medium.com/the-secret-sauce-for-overnight-success-239ee6d3972c\">Medium</a></p>\n\n<p>Need a <strong>Top Rated Front-End Development Freelancer</strong>? Contact me on <a href=\"https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/\">Upwork</a></p>\n\n<p>Want to see what I am working on? Check out my <a href=\"https://github.com/ruppysuppy\">GitHub</a></p>\n\n<p>I am a freelancer who will start off as a <strong>Digital Nomad</strong> in mid-2022. Want to catch the journey? Follow me on <a href=\"https://www.instagram.com/tapajyotib/\">Instagram</a></p>\n\n<p>Follow my blogs for <strong>Weekly new Tidbits</strong> on <a href=\"https://dev.to/ruppysuppy\">Dev</a></p>\n\n<p><strong>FAQ</strong></p>\n\n<p>These are a few commonly asked questions I get. So, I hope this <strong>FAQ</strong> section solves your issues.</p>\n\n<ol>\n<li>\n<p><strong>I am a beginner, how should I learn Front-End Web Dev?</strong><br>\nLook into the following articles:</p>\n\n<ol>\n<li><a href=\"https://dev.to/ruppysuppy/front-end-developer-roadmap-zero-to-hero-4pkf\">Front End Development Roadmap</a></li>\n<li><a href=\"https://dev.to/ruppysuppy/5-projects-to-master-front-end-development-57p\">Front End Project Ideas</a></li>\n</ol>\n\n\n</li>\n<li><p><strong>Would you mentor me?</strong><br><br>\nSorry, I am already under a lot of workload and would not have the time to mentor anyone.</p></li>\n<li><p><strong>Would you like to collaborate on our site?</strong><br><br>\nAs mentioned in the <em>previous question</em>, I am in a time crunch, so I would have to pass on such opportunities.</p></li>\n</ol>\n\n<p><strong>Connect to me on</strong></p>\n\n<ul>\n<li>  <a href=\"https://www.linkedin.com/in/tapajyoti-bose-429a601a0\">LinkedIn</a>\n</li>\n<li>  <a href=\"https://tapajyoti-bose.vercel.app\">Portfolio</a>\n</li>\n<li>  <a href=\"https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/\">Upwork</a>\n</li>\n<li>  <a href=\"https://github.com/ruppysuppy\">GitHub</a>\n</li>\n<li>  <a href=\"https://www.instagram.com/tapajyotib/\">Instagram</a>\n</li>\n</ul>",
      "date_published": "2021-11-07T06:16:22.000Z",
      "author": {
        "name": "Tapajyoti Bose"
      }
    },
    {
      "guid": "https://dev.to/baenencalin/typescript-example-1-ia3",
      "url": "https://dev.to/baenencalin/typescript-example-1-ia3",
      "title": "Typescript Example #1.",
      "content_html": "<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// An example of generics in TypeScript.</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Option</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"na\">v</span><span class=\"p\">:</span><span class=\"nx\">T</span><span class=\"o\">|</span><span class=\"kc\">null</span><span class=\"o\">=</span><span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">v</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">readonly</span> <span class=\"na\">value</span><span class=\"p\">:</span><span class=\"nx\">T</span><span class=\"o\">|</span><span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>",
      "summary": "<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// An example of generics in TypeScript.</span>\n<span class=\"kd\">class</span> <span class=\"nx\">Option</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"na\">v</span><span class=\"p\">:</span><span class=\"nx\">T</span><span class=\"o\">|</span><span class=\"kc\">null</span><span class=\"o\">=</span><span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">v</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n    <span class=\"k\">readonly</span> <span class=\"na\">value</span><span class=\"p\">:</span><span class=\"nx\">T</span><span class=\"o\">|</span><span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>",
      "date_published": "2021-11-07T05:59:15.000Z",
      "author": {
        "name": "Calin Baenen"
      }
    },
    {
      "guid": "https://dev.to/silvenleaf/easiest-way-to-test-typescript-using-jest-by-silvenleaf-iem",
      "url": "https://dev.to/silvenleaf/easiest-way-to-test-typescript-using-jest-by-silvenleaf-iem",
      "title": "Easiest way to Test TypeScript using Jest by SilvenLEAF",
      "content_html": "<p>Hey there my Js siblings! Excited to crash into TypeScript and fell madly in love? But ever wondered how to test your love? Well then fear not! Here we go again! Onto the beautiful world of Testing!!</p>\n\n<p>Also stay tuned! Because on our very next blog, we'll learn some amazing DevOps stuff and integrating it with Github Actions as well!</p>\n\n<p>Anyway, let's init the adventure!</p>\n\n\n\n\n<h3>\n  <a href=\"#step-0-begin-the-project\">\n  </a>\n  Step 0: Begin the Project\n</h3>\n\n<p>Create a folder and open it in your favorite editor (mine VS Code). Then type this command on your project terminal<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>npm init <span class=\"nt\">-y</span>\n</code></pre>\n\n</div>\n\n\n\n<p>(It'll create a package.json file to track all the packages that you'd download and so on)</p>\n\n<h3>\n  <a href=\"#bonus-step-adding-typescript\">\n  </a>\n  Bonus Step: Adding TypeScript\n</h3>\n\n<p>For those who are a bit lost on how to set up the environment and run the TypeScript files, check this one out <strong><a href=\"https://dev.to/silvenleaf/typescript-setup-by-silvenleaf-1aen\">TypeScript SETUP by SilvenLEAF</a></strong></p>\n\n<p>Well anyway, in short (for details, checkout the above link)</p>\n\n<ul>\n<li>install typescript\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>npm i typescript \n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>init our tsconfig\n(make sure you already have typescript globally installed, if not type <strong>npm i -g typescript</strong>. And don't get it confused with the previous normal <strong>npm i typescript</strong> command)\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>tsc <span class=\"nt\">--init</span>\n</code></pre>\n\n</div>\n\n\n\n<p>(It'll create a <strong>.tsconfig</strong> file)</p>\n\n<ul>\n<li>install <strong>ts-node</strong> and <strong>ts-node-dev</strong>\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>npm i ts-node ts-node-dev\n</code></pre>\n\n</div>\n\n\n\n<p>Now let's create an <strong>app.ts</strong> file and create a basic function that we'll be testing later!</p>\n\n<p>Write this in the <strong>app.ts</strong> file<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">add</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">num1</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">,</span> <span class=\"nx\">num2</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">)</span><span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">num1</span> <span class=\"o\">+</span> <span class=\"nx\">num2</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Now that out of the way, let's leap into the beautiful world of testing!</p>\n\n\n\n\n<h3>\n  <a href=\"#step-1-setting-up-jest\">\n  </a>\n  Step 1: Setting up Jest\n</h3>\n\n<p>Install the following packages with the following command<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>npm i <span class=\"nt\">-D</span> jest ts-jest @types/jest\n</code></pre>\n\n</div>\n\n\n\n<p>Jest is a testing library that we'll be using here.</p>\n\n<p>(<strong>npm i -D X</strong> is the short-hand for <strong>npm install --save-dev X</strong>)</p>\n\n<p>Now type the following command<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code> npx ts-jest config:init\n</code></pre>\n\n</div>\n\n\n\n<p>It'll create a <strong>jest.config.js</strong> file at the same level as <strong>package.json</strong> with the following content inside it<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">preset</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">ts-jest</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">testEnvironment</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">node</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Now inside <strong>package.json</strong>, write a script named <strong>test</strong> and give it's value <strong>jest</strong>. It'll look something like this.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"o\">{</span>\n  ...other package.json stuff\n  <span class=\"s2\">\"scripts\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"test\"</span>: <span class=\"s2\">\"jest\"</span>\n  <span class=\"o\">}</span>,\n  ...other package.json stuff\n<span class=\"o\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Now let's write some tests!</p>\n\n\n\n\n<h3>\n  <a href=\"#step-2-write-some-tests\">\n  </a>\n  Step 2: Write some tests\n</h3>\n\n<p>Create a folder named <strong>tests</strong> at the same level as <strong>package.json</strong>. And write all your test files inside it. As you might have guessed, the name of your test files will be something like this <strong>{file_name}.test.ts</strong></p>\n\n<p>Now let's create a test file, named <strong>app.test.ts</strong> to test our <strong>app.ts</strong> file.</p>\n\n<p>Write this inside <strong>app.test.ts</strong> file. Read the comments to learn in depth what each word and each line does!<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// @By SilvenLEAF</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">add</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../app</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Add function Tests</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Adding 5 and 3 to be number 8</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n\n  <span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Adding 7 and 2 to be string \"9\"</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">9</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n\n  <span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Adding 3 and 2 to be 5</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n\n\n<span class=\"cm\">/*\n---------------------------------------\n   Let's learn how to write a test\n---------------------------------------\n  METHOD 1:\n\n  test(\"Your Test Name\", ()=&gt;{\n    expect(something).toBe(something)\n  })\n\n  [OR]\n\n  METHOD 2:\n\n  it(\"Your Test Name\", ()=&gt;{\n    expect(something).toBe(something)\n  })\n\n\n--------------------------------------------\n.  Modularizing your tests collection\n--------------------------------------------\n\n  describe('your test module name', () =&gt; {\n    // inside here you'll write the tests for this module, you can use both test() or it(())\n    test('if it does this thing', () =&gt; { expect(something).toBe(something) });\n    test('if it does the other thing', () =&gt; { expect(something).toBe(something) });\n  });\n\n  [OR]\n\n  describe('your test module name', () =&gt; {\n    // inside here you'll write the tests for this module, you can use both test() or it(())\n    it('if it does this thing', () =&gt; { expect(something).toBe(something) });\n    it('if it does the other thing', () =&gt; { expect(something).toBe(something) });\n  });\n\n--------------------------------------------\n.      With love from SilvenLEAF\n--------------------------------------------\n*/</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  <a href=\"#step-3-lets-test-our-tests\">\n  </a>\n  Step 3: Let's test our tests\n</h3>\n\n<p>Yep, sounds weirdly amazing! So let's do this! Type any of the 3 commands to run our tests.</p>\n\n<ol>\n<li><strong>npm run test</strong></li>\n<li><strong>npm test</strong></li>\n<li><strong>npm t</strong></li>\n</ol>\n\n<p>All of  these do the same thing. One is the short-hand of other and vise versa! Anyway, let's run it. You might see something like this:<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cJ2eNsM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4uf6y7czt7al4ap9tfz.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cJ2eNsM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4uf6y7czt7al4ap9tfz.png\" alt=\"Test (Pass and Fail)\" width=\"859\" height=\"829\"></a></p>\n\n<p>Congrats!! We just tested our beloved love TypeScript!! So sweet!</p>\n\n\n\n\n<p>Stay tuned for more! Because we are gonna dive onto the DevOps world on our following blogs! We'll learn CI, CD, Github Actions, Automations and many many MORE!!</p>\n\n<p><strong>NEXT blog coming soon by Nov 10th!!</strong></p>\n\n<h1>\n  <a href=\"#whats-next\">\n  </a>\n  What's NEXT?\n</h1>\n\n<h4>\n  <a href=\"#1-how-to-deploy-in-the-cloud-azure-vms\">\n  </a>\n  1. How to deploy in the Cloud (Azure VMs)\n</h4>\n\n<h4>\n  <a href=\"#2-learning-devops-with-github-actions\">\n  </a>\n  2. Learning DevOps with Github Actions\n</h4>\n\n<h4>\n  <a href=\"#3-improved-ai-bot-that-can-do-anything\">\n  </a>\n  3. Improved AI BOT that can do anything\n</h4>\n\n<h4>\n  <a href=\"#4-insane-stuff-with-javascripttypescript\">\n  </a>\n  4. Insane stuff with JavaScript/TypeScript\n</h4>\n\n<h4>\n  <a href=\"#5-debugging-typescript-with-vs-code-debugger\">\n  </a>\n  5. Debugging TypeScript with VS Code Debugger\n</h4>\n\n<h4>\n  <a href=\"#6-sequelize-hooks\">\n  </a>\n  6. Sequelize Hooks\n</h4>\n\n<h4>\n  <a href=\"#7-how-to-create-an-android-app-with-no-xp\">\n  </a>\n  7. How to create an Android APP with NO XP\n</h4>\n\n<p>(including apk generating)</p>\n\n<h1>\n  <a href=\"#got-any-doubt\">\n  </a>\n  Got any doubt?\n</h1>\n\n<p>Drop a comment or Feel free to reach out to me @SilveLEAF on Twitter or <a href=\"https://www.linkedin.com/in/silvenleaf/\">Linkedin</a></p>\n\n<p>Wanna know more about me? Come here! <br>\n<a href=\"https://SilvenLEAF.github.io\">SilvenLEAF.github.io</a></p>",
      "summary": "<p>Hey there my Js siblings! Excited to crash into TypeScript and fell madly in love? But ever wondered how to test your love? Well then fear not! Here we go again! Onto the beautiful world of Testing!!</p>\n\n<p>Also stay tuned! Because on our very next blog, we'll learn some amazing DevOps stuff and integrating it with Github Actions as well!</p>\n\n<p>Anyway, let's init the adventure!</p>\n\n\n\n\n<h3>\n  <a href=\"#step-0-begin-the-project\">\n  </a>\n  Step 0: Begin the Project\n</h3>\n\n<p>Create a folder and open it in your favorite editor (mine VS Code). Then type this command on your project terminal<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>npm init <span class=\"nt\">-y</span>\n</code></pre>\n\n</div>\n\n\n\n<p>(It'll create a package.json file to track all the packages that you'd download and so on)</p>\n\n<h3>\n  <a href=\"#bonus-step-adding-typescript\">\n  </a>\n  Bonus Step: Adding TypeScript\n</h3>\n\n<p>For those who are a bit lost on how to set up the environment and run the TypeScript files, check this one out <strong><a href=\"https://dev.to/silvenleaf/typescript-setup-by-silvenleaf-1aen\">TypeScript SETUP by SilvenLEAF</a></strong></p>\n\n<p>Well anyway, in short (for details, checkout the above link)</p>\n\n<ul>\n<li>install typescript\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>npm i typescript \n</code></pre>\n\n</div>\n\n\n\n<ul>\n<li>init our tsconfig\n(make sure you already have typescript globally installed, if not type <strong>npm i -g typescript</strong>. And don't get it confused with the previous normal <strong>npm i typescript</strong> command)\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>tsc <span class=\"nt\">--init</span>\n</code></pre>\n\n</div>\n\n\n\n<p>(It'll create a <strong>.tsconfig</strong> file)</p>\n\n<ul>\n<li>install <strong>ts-node</strong> and <strong>ts-node-dev</strong>\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>npm i ts-node ts-node-dev\n</code></pre>\n\n</div>\n\n\n\n<p>Now let's create an <strong>app.ts</strong> file and create a basic function that we'll be testing later!</p>\n\n<p>Write this in the <strong>app.ts</strong> file<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">add</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">num1</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">,</span> <span class=\"nx\">num2</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">)</span><span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">num1</span> <span class=\"o\">+</span> <span class=\"nx\">num2</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Now that out of the way, let's leap into the beautiful world of testing!</p>\n\n\n\n\n<h3>\n  <a href=\"#step-1-setting-up-jest\">\n  </a>\n  Step 1: Setting up Jest\n</h3>\n\n<p>Install the following packages with the following command<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>npm i <span class=\"nt\">-D</span> jest ts-jest @types/jest\n</code></pre>\n\n</div>\n\n\n\n<p>Jest is a testing library that we'll be using here.</p>\n\n<p>(<strong>npm i -D X</strong> is the short-hand for <strong>npm install --save-dev X</strong>)</p>\n\n<p>Now type the following command<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code> npx ts-jest config:init\n</code></pre>\n\n</div>\n\n\n\n<p>It'll create a <strong>jest.config.js</strong> file at the same level as <strong>package.json</strong> with the following content inside it<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">preset</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">ts-jest</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n  <span class=\"na\">testEnvironment</span><span class=\"p\">:</span> <span class=\"dl\">'</span><span class=\"s1\">node</span><span class=\"dl\">'</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Now inside <strong>package.json</strong>, write a script named <strong>test</strong> and give it's value <strong>jest</strong>. It'll look something like this.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code><span class=\"o\">{</span>\n  ...other package.json stuff\n  <span class=\"s2\">\"scripts\"</span>: <span class=\"o\">{</span>\n    <span class=\"s2\">\"test\"</span>: <span class=\"s2\">\"jest\"</span>\n  <span class=\"o\">}</span>,\n  ...other package.json stuff\n<span class=\"o\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Now let's write some tests!</p>\n\n\n\n\n<h3>\n  <a href=\"#step-2-write-some-tests\">\n  </a>\n  Step 2: Write some tests\n</h3>\n\n<p>Create a folder named <strong>tests</strong> at the same level as <strong>package.json</strong>. And write all your test files inside it. As you might have guessed, the name of your test files will be something like this <strong>{file_name}.test.ts</strong></p>\n\n<p>Now let's create a test file, named <strong>app.test.ts</strong> to test our <strong>app.ts</strong> file.</p>\n\n<p>Write this inside <strong>app.test.ts</strong> file. Read the comments to learn in depth what each word and each line does!<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// @By SilvenLEAF</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">add</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../app</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Add function Tests</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Adding 5 and 3 to be number 8</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n\n  <span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Adding 7 and 2 to be string \"9\"</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">9</span><span class=\"dl\">'</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n\n  <span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Adding 3 and 2 to be 5</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)).</span><span class=\"nx\">toBe</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n\n\n<span class=\"cm\">/*\n---------------------------------------\n   Let's learn how to write a test\n---------------------------------------\n  METHOD 1:\n\n  test(\"Your Test Name\", ()=&gt;{\n    expect(something).toBe(something)\n  })\n\n  [OR]\n\n  METHOD 2:\n\n  it(\"Your Test Name\", ()=&gt;{\n    expect(something).toBe(something)\n  })\n\n\n--------------------------------------------\n.  Modularizing your tests collection\n--------------------------------------------\n\n  describe('your test module name', () =&gt; {\n    // inside here you'll write the tests for this module, you can use both test() or it(())\n    test('if it does this thing', () =&gt; { expect(something).toBe(something) });\n    test('if it does the other thing', () =&gt; { expect(something).toBe(something) });\n  });\n\n  [OR]\n\n  describe('your test module name', () =&gt; {\n    // inside here you'll write the tests for this module, you can use both test() or it(())\n    it('if it does this thing', () =&gt; { expect(something).toBe(something) });\n    it('if it does the other thing', () =&gt; { expect(something).toBe(something) });\n  });\n\n--------------------------------------------\n.      With love from SilvenLEAF\n--------------------------------------------\n*/</span>\n</code></pre>\n\n</div>\n\n\n\n\n\n\n<h3>\n  <a href=\"#step-3-lets-test-our-tests\">\n  </a>\n  Step 3: Let's test our tests\n</h3>\n\n<p>Yep, sounds weirdly amazing! So let's do this! Type any of the 3 commands to run our tests.</p>\n\n<ol>\n<li><strong>npm run test</strong></li>\n<li><strong>npm test</strong></li>\n<li><strong>npm t</strong></li>\n</ol>\n\n<p>All of  these do the same thing. One is the short-hand of other and vise versa! Anyway, let's run it. You might see something like this:<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cJ2eNsM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4uf6y7czt7al4ap9tfz.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cJ2eNsM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4uf6y7czt7al4ap9tfz.png\" alt=\"Test (Pass and Fail)\" width=\"859\" height=\"829\"></a></p>\n\n<p>Congrats!! We just tested our beloved love TypeScript!! So sweet!</p>\n\n\n\n\n<p>Stay tuned for more! Because we are gonna dive onto the DevOps world on our following blogs! We'll learn CI, CD, Github Actions, Automations and many many MORE!!</p>\n\n<p><strong>NEXT blog coming soon by Nov 10th!!</strong></p>\n\n<h1>\n  <a href=\"#whats-next\">\n  </a>\n  What's NEXT?\n</h1>\n\n<h4>\n  <a href=\"#1-how-to-deploy-in-the-cloud-azure-vms\">\n  </a>\n  1. How to deploy in the Cloud (Azure VMs)\n</h4>\n\n<h4>\n  <a href=\"#2-learning-devops-with-github-actions\">\n  </a>\n  2. Learning DevOps with Github Actions\n</h4>\n\n<h4>\n  <a href=\"#3-improved-ai-bot-that-can-do-anything\">\n  </a>\n  3. Improved AI BOT that can do anything\n</h4>\n\n<h4>\n  <a href=\"#4-insane-stuff-with-javascripttypescript\">\n  </a>\n  4. Insane stuff with JavaScript/TypeScript\n</h4>\n\n<h4>\n  <a href=\"#5-debugging-typescript-with-vs-code-debugger\">\n  </a>\n  5. Debugging TypeScript with VS Code Debugger\n</h4>\n\n<h4>\n  <a href=\"#6-sequelize-hooks\">\n  </a>\n  6. Sequelize Hooks\n</h4>\n\n<h4>\n  <a href=\"#7-how-to-create-an-android-app-with-no-xp\">\n  </a>\n  7. How to create an Android APP with NO XP\n</h4>\n\n<p>(including apk generating)</p>\n\n<h1>\n  <a href=\"#got-any-doubt\">\n  </a>\n  Got any doubt?\n</h1>\n\n<p>Drop a comment or Feel free to reach out to me @SilveLEAF on Twitter or <a href=\"https://www.linkedin.com/in/silvenleaf/\">Linkedin</a></p>\n\n<p>Wanna know more about me? Come here! <br>\n<a href=\"https://SilvenLEAF.github.io\">SilvenLEAF.github.io</a></p>",
      "date_published": "2021-11-07T05:44:55.000Z",
      "author": {
        "name": "SilvenLEAF"
      }
    },
    {
      "guid": "https://dev.to/attaullahshafiq10/dev-ops-59dm",
      "url": "https://dev.to/attaullahshafiq10/dev-ops-59dm",
      "title": "DEV-OPS",
      "content_html": "<p>DEV-OPS</p>\n\n<p>Its a culture, concept, process and approach that merges software requirement gathering, software development, testing, quality assurance, system configurations, product deployment and operations. Organizations building or improving software products are moving towards a DevOps approach where development, testing, security, quality assurance and operations are getting merged within a large team and those technical resources work side by side to achieve higher return on investment</p>\n\n<p>DevOps is one of the most broad topics within software dev because it lacks boundaries and limitations. Many technologies, tools, concepts, processes and ideas converge to give a good DevOps pipeline and DevOps process resulting in agile planning, continuous integration, continuous delivery, and high level monitoring of your enterprise level software systems. Hence, devops is not a single role or even a team's work that deals with all the technologies and processes. It a mixture of culture, traditions and process.</p>\n\n<p>SKILLS TO KNOW FOR DEVOPS</p>\n\n<ol>\n<li>Continuous Integration</li>\n<li>Continuous Deployment</li>\n<li>Testing Mechanisms &amp; Strategies</li>\n<li>Monitoring &amp; Alerting Systems</li>\n<li>Logging &amp; Distributed Tracing</li>\n<li>Software Debugging</li>\n<li>Software's Configurations</li>\n<li>Batch Processes, Trigger Processes</li>\n<li>Build Systems &amp; Tools</li>\n<li>Configuration Management</li>\n<li>Automation Platforms</li>\n<li>Observability Systems</li>\n<li>Quality Assurance Tools</li>\n<li>Version Control Systems</li>\n<li>Artifact or Package Repositories</li>\n<li>Issue Tracking Platforms</li>\n<li>Code Quality, Review Systems</li>\n<li>Containerization Tools</li>\n<li>Software Orchestration Systems</li>\n<li>APIs Management Platforms</li>\n<li>Different Testing Environments</li>\n<li>Cloud Services</li>\n<li>Scripting Language</li>\n<li>One Programming Language</li>\n<li>Distributed Systems</li>\n<li>Operating Systems (Linux, Unix)</li>\n<li>Shell Scripting</li>\n<li>Software Security Concepts</li>\n<li>ITSM (IT Service Management)</li>\n<li>Relational &amp; Non Relational Storage</li>\n<li>Virtualization Technologies</li>\n<li>Servers, Host Machines &amp; Systems</li>\n<li>Clustering, Replication, Deadlocks</li>\n<li>Partitioning, Distributed Systems</li>\n<li>Microservices, APIs &amp; FaaS</li>\n<li>BigData &amp; DataOps</li>\n<li>Open Source Tech(s)</li>\n<li>Master Data, Data Warehouses, Data Lakes</li>\n<li>Agile Methodologies &amp; SAFe Framework</li>\n<li>Software Management Life Cycle</li>\n<li>Software Architecture &amp; Design</li>\n<li>Functional &amp; Non-Functional System Features</li>\n<li>API Gateways, Service Mesh, Load Balancers</li>\n<li>Enterprise Platforms &amp; Infrastructures</li>\n<li>Integration Concepts (ESB, Middleware)</li>\n<li>Web, App Servers</li>\n<li>Dependency Management</li>\n<li>Deployment Mechanism</li>\n</ol>\n\n<p>SKILLS TO BE AN EXCELLENT DEV-OPS RESOURCE</p>\n\n<ol>\n<li>Ability to learn new technologies</li>\n<li>Highly collaborative</li>\n<li>Able to handle stress</li>\n<li>Good management skills</li>\n<li>Excellent communication skills</li>\n<li>Flexible &amp; understanding</li>\n<li>Able to learn business features</li>\n<li>Able to understand end to end process</li>\n<li>Able to understand stakeholders</li>\n<li>Capable of dealing with many technologies\n<img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--nTZ2ytQO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fiof5sbddr83k75iitj4.jpg\" alt=\"Image description\" width=\"692\" height=\"777\">\n</li>\n</ol>\n\n<p>IMAGE SOURCE<br>\n<a href=\"https://lnkd.in/e62hdXUw\">https://lnkd.in/e62hdXUw</a></p>",
      "summary": "<p>DEV-OPS</p>\n\n<p>Its a culture, concept, process and approach that merges software requirement gathering, software development, testing, quality assurance, system configurations, product deployment and operations. Organizations building or improving software products are moving towards a DevOps approach where development, testing, security, quality assurance and operations are getting merged within a large team and those technical resources work side by side to achieve higher return on investment</p>\n\n<p>DevOps is one of the most broad topics within software dev because it lacks boundaries and limitations. Many technologies, tools, concepts, processes and ideas converge to give a good DevOps pipeline and DevOps process resulting in agile planning, continuous integration, continuous delivery, and high level monitoring of your enterprise level software systems. Hence, devops is not a single role or even a team's work that deals with all the technologies and processes. It a mixture of culture, traditions and process.</p>\n\n<p>SKILLS TO KNOW FOR DEVOPS</p>\n\n<ol>\n<li>Continuous Integration</li>\n<li>Continuous Deployment</li>\n<li>Testing Mechanisms &amp; Strategies</li>\n<li>Monitoring &amp; Alerting Systems</li>\n<li>Logging &amp; Distributed Tracing</li>\n<li>Software Debugging</li>\n<li>Software's Configurations</li>\n<li>Batch Processes, Trigger Processes</li>\n<li>Build Systems &amp; Tools</li>\n<li>Configuration Management</li>\n<li>Automation Platforms</li>\n<li>Observability Systems</li>\n<li>Quality Assurance Tools</li>\n<li>Version Control Systems</li>\n<li>Artifact or Package Repositories</li>\n<li>Issue Tracking Platforms</li>\n<li>Code Quality, Review Systems</li>\n<li>Containerization Tools</li>\n<li>Software Orchestration Systems</li>\n<li>APIs Management Platforms</li>\n<li>Different Testing Environments</li>\n<li>Cloud Services</li>\n<li>Scripting Language</li>\n<li>One Programming Language</li>\n<li>Distributed Systems</li>\n<li>Operating Systems (Linux, Unix)</li>\n<li>Shell Scripting</li>\n<li>Software Security Concepts</li>\n<li>ITSM (IT Service Management)</li>\n<li>Relational &amp; Non Relational Storage</li>\n<li>Virtualization Technologies</li>\n<li>Servers, Host Machines &amp; Systems</li>\n<li>Clustering, Replication, Deadlocks</li>\n<li>Partitioning, Distributed Systems</li>\n<li>Microservices, APIs &amp; FaaS</li>\n<li>BigData &amp; DataOps</li>\n<li>Open Source Tech(s)</li>\n<li>Master Data, Data Warehouses, Data Lakes</li>\n<li>Agile Methodologies &amp; SAFe Framework</li>\n<li>Software Management Life Cycle</li>\n<li>Software Architecture &amp; Design</li>\n<li>Functional &amp; Non-Functional System Features</li>\n<li>API Gateways, Service Mesh, Load Balancers</li>\n<li>Enterprise Platforms &amp; Infrastructures</li>\n<li>Integration Concepts (ESB, Middleware)</li>\n<li>Web, App Servers</li>\n<li>Dependency Management</li>\n<li>Deployment Mechanism</li>\n</ol>\n\n<p>SKILLS TO BE AN EXCELLENT DEV-OPS RESOURCE</p>\n\n<ol>\n<li>Ability to learn new technologies</li>\n<li>Highly collaborative</li>\n<li>Able to handle stress</li>\n<li>Good management skills</li>\n<li>Excellent communication skills</li>\n<li>Flexible &amp; understanding</li>\n<li>Able to learn business features</li>\n<li>Able to understand end to end process</li>\n<li>Able to understand stakeholders</li>\n<li>Capable of dealing with many technologies\n<img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--nTZ2ytQO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fiof5sbddr83k75iitj4.jpg\" alt=\"Image description\" width=\"692\" height=\"777\">\n</li>\n</ol>\n\n<p>IMAGE SOURCE<br>\n<a href=\"https://lnkd.in/e62hdXUw\">https://lnkd.in/e62hdXUw</a></p>",
      "date_published": "2021-11-07T05:12:47.000Z",
      "author": {
        "name": "Hafiz Muhammad Attaullah"
      }
    },
    {
      "guid": "https://dev.to/nadeemkhanrtm/detect-scroll-direction-reactjs-1gnp",
      "url": "https://dev.to/nadeemkhanrtm/detect-scroll-direction-reactjs-1gnp",
      "title": "Detect Scroll Direction ReactJS",
      "content_html": "<p>In these blog. I am detecting scroll direction either person id scrolling down or up. To use these concept you can make some better thing like Navbar. Render a Navbar when we scroll untill that it gets disappear. So I am explaining here only about scroll direction If you want the example then please let me know.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import React, {useEffect, useState, useCallback} from 'react';\nimport { Fragment } from 'react/cjs/react.production.min';\nimport styles from \"./App.module.css\";\n\nconst App = () =&gt; {\n  const [y,\n    setY] = useState(document.scrollingElement.scrollHeight);\n  const [scrollDirection,\n    setScrollDirection] = useState(\"you have not scrolled yet\");\n\n  const handleNavigation = useCallback((e) =&gt; {\n\n    if (y &gt; window.scrollY) {\n      setScrollDirection(\"Scrolling Up\");\n      console.log(\"scrolling up\");\n    } else if (y &lt; window.scrollY) {\n      setScrollDirection(\"Scrolling Down\");\n      console.log(\"scrolling down\");\n    }\n    setY(window.scrollY)\n  }, [y]);\n\n  useEffect(() =&gt; {\n\n    window.addEventListener(\"scroll\", handleNavigation);\n\n    return () =&gt; {\n      window.removeEventListener(\"scroll\", handleNavigation);\n    };\n  }, [handleNavigation]);\n\n\n  return (\n    &lt;Fragment&gt;\n    &lt;div className={styles.main_container}&gt;\n\n    &lt;/div&gt;\n      &lt;div&gt;{scrollDirection}&lt;/div&gt;\n    &lt;/Fragment&gt;\n  )\n}\n\nexport default App\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  <a href=\"#output-result\">\n  </a>\n  OutPut Result\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--n-G_5pie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4u7rjv2rawd78voq6vv4.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--n-G_5pie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4u7rjv2rawd78voq6vv4.gif\" alt=\"Result\" width=\"880\" height=\"495\"></a></p>",
      "summary": "<p>In these blog. I am detecting scroll direction either person id scrolling down or up. To use these concept you can make some better thing like Navbar. Render a Navbar when we scroll untill that it gets disappear. So I am explaining here only about scroll direction If you want the example then please let me know.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import React, {useEffect, useState, useCallback} from 'react';\nimport { Fragment } from 'react/cjs/react.production.min';\nimport styles from \"./App.module.css\";\n\nconst App = () =&gt; {\n  const [y,\n    setY] = useState(document.scrollingElement.scrollHeight);\n  const [scrollDirection,\n    setScrollDirection] = useState(\"you have not scrolled yet\");\n\n  const handleNavigation = useCallback((e) =&gt; {\n\n    if (y &gt; window.scrollY) {\n      setScrollDirection(\"Scrolling Up\");\n      console.log(\"scrolling up\");\n    } else if (y &lt; window.scrollY) {\n      setScrollDirection(\"Scrolling Down\");\n      console.log(\"scrolling down\");\n    }\n    setY(window.scrollY)\n  }, [y]);\n\n  useEffect(() =&gt; {\n\n    window.addEventListener(\"scroll\", handleNavigation);\n\n    return () =&gt; {\n      window.removeEventListener(\"scroll\", handleNavigation);\n    };\n  }, [handleNavigation]);\n\n\n  return (\n    &lt;Fragment&gt;\n    &lt;div className={styles.main_container}&gt;\n\n    &lt;/div&gt;\n      &lt;div&gt;{scrollDirection}&lt;/div&gt;\n    &lt;/Fragment&gt;\n  )\n}\n\nexport default App\n</code></pre>\n\n</div>\n\n\n\n<h2>\n  <a href=\"#output-result\">\n  </a>\n  OutPut Result\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--n-G_5pie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4u7rjv2rawd78voq6vv4.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--n-G_5pie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4u7rjv2rawd78voq6vv4.gif\" alt=\"Result\" width=\"880\" height=\"495\"></a></p>",
      "date_published": "2021-11-07T04:58:39.000Z",
      "author": {
        "name": "Nadeem Khan"
      }
    },
    {
      "guid": "https://dev.to/kenji_goh/project-euler-problem-2-fibonacci-question-3cj8",
      "url": "https://dev.to/kenji_goh/project-euler-problem-2-fibonacci-question-3cj8",
      "title": "Project Euler Problem 2 - Fibonacci Question",
      "content_html": "<p>Hi All! This is my first post here! I shall share a short post on the solution to the Fibonacci Problem by Project Euler. This is considered a common beginner level question to practice basic 'for loop'. </p>\n\n<p>The Question is as such:</p>\n\n<p><em>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:</em></p>\n\n<p>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</p>\n\n<p><em>By considering the terms in the Fibonacci sequence whose values <strong>do not exceed four million</strong>, find the <strong>sum of the even-valued terms</strong>.</em></p>\n\n<p>Posting my solution (in JavaScript) here for sharing!<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>let n1 = 0,\n  n2 = 1,\n  nextNum,\n  fiboSum = 0,\n  fiboArr = [];\n\nfor (let i = 1; i &lt;= 100; i++) {\n  // console.log(n1); //keep logging new n1\n  fiboArr.push(n1);\n  nextNum = n1 + n2; //get nextNum\n  n1 = n2; //update prev n2 as new n1\n  n2 = nextNum; //update nextNum as new n2\n}\n//console.log(fiboArr);\n\nfor (let i of fiboArr) {\n  if (i % 2 === 0 &amp;&amp; i &lt; 4000000) {\n    console.log(i);\n    fiboSum = fiboSum + i;\n  }\n}\nconsole.log(`Sum of even-valued terms: ${fiboSum}`);\n\n</code></pre>\n\n</div>\n\n\n\n<p>You will see this in your terminal:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>0\n2\n8\n34\n144\n610\n2584\n10946\n46368\n196418\n832040\n3524578\nSum of even-valued terms: 4613732\n</code></pre>\n\n</div>\n\n\n\n<p>For those interested to solve more challenging questions, you may refer to this link for more questions. <a href=\"https://projecteuler.net/archives\">Click Here</a>. Cheers!</p>",
      "summary": "<p>Hi All! This is my first post here! I shall share a short post on the solution to the Fibonacci Problem by Project Euler. This is considered a common beginner level question to practice basic 'for loop'. </p>\n\n<p>The Question is as such:</p>\n\n<p><em>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:</em></p>\n\n<p>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</p>\n\n<p><em>By considering the terms in the Fibonacci sequence whose values <strong>do not exceed four million</strong>, find the <strong>sum of the even-valued terms</strong>.</em></p>\n\n<p>Posting my solution (in JavaScript) here for sharing!<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>let n1 = 0,\n  n2 = 1,\n  nextNum,\n  fiboSum = 0,\n  fiboArr = [];\n\nfor (let i = 1; i &lt;= 100; i++) {\n  // console.log(n1); //keep logging new n1\n  fiboArr.push(n1);\n  nextNum = n1 + n2; //get nextNum\n  n1 = n2; //update prev n2 as new n1\n  n2 = nextNum; //update nextNum as new n2\n}\n//console.log(fiboArr);\n\nfor (let i of fiboArr) {\n  if (i % 2 === 0 &amp;&amp; i &lt; 4000000) {\n    console.log(i);\n    fiboSum = fiboSum + i;\n  }\n}\nconsole.log(`Sum of even-valued terms: ${fiboSum}`);\n\n</code></pre>\n\n</div>\n\n\n\n<p>You will see this in your terminal:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>0\n2\n8\n34\n144\n610\n2584\n10946\n46368\n196418\n832040\n3524578\nSum of even-valued terms: 4613732\n</code></pre>\n\n</div>\n\n\n\n<p>For those interested to solve more challenging questions, you may refer to this link for more questions. <a href=\"https://projecteuler.net/archives\">Click Here</a>. Cheers!</p>",
      "date_published": "2021-11-07T04:01:53.000Z",
      "author": {
        "name": "yqgoh"
      }
    },
    {
      "guid": "https://dev.to/aws-builders/how-to-learn-and-practice-more-in-kubernetes-network-policy-for-ckx-exams-and-eks--4cgn",
      "url": "https://dev.to/aws-builders/how-to-learn-and-practice-more-in-kubernetes-network-policy-for-ckx-exams-and-eks--4cgn",
      "title": "How to learn and practice more in Kubernetes Network Policy for CKx exams and EKS ?",
      "content_html": "<p>Good to learn more in Kubernetes network policy for CKx exams and EKS. Below are resources:<br>\n1/ read official doc and try to understand them well - <a href=\"https://kubernetes.io/docs/concepts/services-networking/network-policies/\">https://kubernetes.io/docs/concepts/services-networking/network-policies/</a><br>\n2/ bookmark samples for exams and EKS setups - <a href=\"https://kubernetes.io/docs/concepts/services-networking/network-policies/#networkpolicy-resource\">https://kubernetes.io/docs/concepts/services-networking/network-policies/#networkpolicy-resource</a><br>\n3/ do more practices at <a href=\"https://github.com/ahmetb/kubernetes-network-policy-recipes\">https://github.com/ahmetb/kubernetes-network-policy-recipes</a><br>\n4/ visualize (image below) and try more at <a href=\"https://editor.cilium.io/\">https://editor.cilium.io/</a> - it allows you to save the final netpol in k8s netpol OR Cilium netpol (EKS-A is using Cilium !) </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2gjwWMmj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynl37r7fhogsh9o81xxw.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2gjwWMmj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynl37r7fhogsh9o81xxw.jpg\" alt=\"Image description\" width=\"880\" height=\"494\"></a></p>",
      "summary": "<p>Good to learn more in Kubernetes network policy for CKx exams and EKS. Below are resources:<br>\n1/ read official doc and try to understand them well - <a href=\"https://kubernetes.io/docs/concepts/services-networking/network-policies/\">https://kubernetes.io/docs/concepts/services-networking/network-policies/</a><br>\n2/ bookmark samples for exams and EKS setups - <a href=\"https://kubernetes.io/docs/concepts/services-networking/network-policies/#networkpolicy-resource\">https://kubernetes.io/docs/concepts/services-networking/network-policies/#networkpolicy-resource</a><br>\n3/ do more practices at <a href=\"https://github.com/ahmetb/kubernetes-network-policy-recipes\">https://github.com/ahmetb/kubernetes-network-policy-recipes</a><br>\n4/ visualize (image below) and try more at <a href=\"https://editor.cilium.io/\">https://editor.cilium.io/</a> - it allows you to save the final netpol in k8s netpol OR Cilium netpol (EKS-A is using Cilium !) </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2gjwWMmj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynl37r7fhogsh9o81xxw.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2gjwWMmj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ynl37r7fhogsh9o81xxw.jpg\" alt=\"Image description\" width=\"880\" height=\"494\"></a></p>",
      "date_published": "2021-11-07T02:59:52.000Z",
      "author": {
        "name": "Walter Lee"
      }
    },
    {
      "guid": "https://dev.to/eliasjnior/how-to-make-asynchronous-requests-to-your-api-in-react-1a7m",
      "url": "https://dev.to/eliasjnior/how-to-make-asynchronous-requests-to-your-api-in-react-1a7m",
      "title": "How to make asynchronous requests to your API in React",
      "content_html": "<p>This is a common problem that beginner React developers face when working on a new project. I will show here what you are doing and a method you can use to have a better and cleaner code (with tests!).</p>\n\n<p>Let's suppose that we are developing a new blog application that will render a simple list of posts based on the response of our API. Usually what we have is this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useEffect</span><span class=\"p\">,</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"nx\">axios</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">axios</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Post</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../../types/post</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">Pagination</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../Pagination/Pagination</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">PostCard</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../PostCard/PostCard</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">DirBlogPosts</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">FC</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">page</span><span class=\"p\">,</span> <span class=\"nx\">setPage</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"kr\">number</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">posts</span><span class=\"p\">,</span> <span class=\"nx\">setPosts</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">Post</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">([]);</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">isLoading</span><span class=\"p\">,</span> <span class=\"nx\">setIsLoading</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"nx\">boolean</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">isError</span><span class=\"p\">,</span> <span class=\"nx\">setIsError</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"nx\">boolean</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"p\">(</span><span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">try</span> <span class=\"p\">{</span>\n        <span class=\"nx\">setIsLoading</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n        <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">data</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">&lt;</span><span class=\"nc\">Array</span><span class=\"err\">&lt;</span><span class=\"na\">Post</span><span class=\"p\">&gt;</span>&gt;('https://example.com/posts', <span class=\"si\">{</span>\n          <span class=\"nx\">params</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nx\">page</span> <span class=\"p\">},</span>\n        <span class=\"si\">}</span>);\n        setPosts(data);\n      } catch (error) <span class=\"si\">{</span>\n        <span class=\"nx\">setIsError</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n      <span class=\"si\">}</span> finally <span class=\"si\">{</span>\n        <span class=\"nx\">setIsLoading</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n      <span class=\"si\">}</span>\n    })();\n  }, [page]);\n\n  if (isLoading) <span class=\"si\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Loading posts...<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;;</span>\n  <span class=\"si\">}</span>\n\n  if (isError) <span class=\"si\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>There was an error trying to load the posts.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;;</span>\n  <span class=\"si\">}</span>\n\n  return (\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"si\">{</span><span class=\"nx\">posts</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">post</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n        <span class=\"p\">&lt;</span><span class=\"nc\">PostCard</span> <span class=\"na\">post</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">post</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">))</span><span class=\"si\">}</span>\n      <span class=\"p\">&lt;</span><span class=\"nc\">Pagination</span> <span class=\"na\">page</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">page</span><span class=\"si\">}</span> <span class=\"na\">onChangePage</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">setPage</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  );\n};\n\nexport default DirBlogPosts;\n</code></pre>\n\n</div>\n\n\n\n<p>Here we have the states <code>page</code>, <code>posts</code>, <code>isLoading</code> and <code>isError</code>. These states are updated when the component renders for the first time, or whenever the <code>page</code> is changed.</p>\n\n<p>Can you see the problem here?</p>\n\n<ol>\n<li>We have all the fetching logic inside our component;</li>\n<li>We need to control many states manually;</li>\n<li>It's hard to create automated tests.</li>\n</ol>\n\n<p>But we can try to follow a different approach and create a cleaner code.</p>\n\n<h2>\n  <a href=\"#build-your-service\">\n  </a>\n  Build your service\n</h2>\n\n<p>First of all, taking advantage of Typescript's features, let's define what is a post:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"c1\">// src/types/post.ts</span>\n<span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"nx\">Post</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"nl\">title</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">imageUrl</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">content</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The post is basically an object with <code>id</code>, <code>title</code> , <code>imageUrl</code> and <code>content</code>.</p>\n\n<p>Now we can create the definition of our \"list posts service\":<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"c1\">// src/services/definitions/list-posts-service.ts</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Post</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../../types/post</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">ListPostsService</span> <span class=\"p\">{</span>\n  <span class=\"nx\">list</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">:</span> <span class=\"nx\">ListPostsService</span><span class=\"p\">.</span><span class=\"nx\">Params</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">ListPostsService</span><span class=\"p\">.</span><span class=\"nx\">Result</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">namespace</span> <span class=\"nx\">ListPostsService</span> <span class=\"p\">{</span>\n  <span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"nx\">Params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span><span class=\"p\">?:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"nx\">Result</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">Post</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Here we define that the \"list post service\" implementation should have a method called <code>list</code>, that will receive the defined params and return the defined result.</p>\n\n<p>Why have we created an interface for that?</p>\n\n<p>The answer is simple: our component will receive this service and execute it. The component doesn't even need to know if you will be using Axios or Fetch. Let's say your component will be agnostic. Sometime later you may need to change the Axios to Fetch, or even use Redux.</p>\n\n<p>So, let's build our Axios service implementation:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"c1\">// src/services/implementation/axios-list-posts-service.ts</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AxiosInstance</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">axios</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Post</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../../types/post</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ListPostsService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../definitions/list-posts-service</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"nx\">AxiosListPostsService</span> <span class=\"k\">implements</span> <span class=\"nx\">ListPostsService</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"k\">private</span> <span class=\"k\">readonly</span> <span class=\"nx\">axiosInstance</span><span class=\"p\">:</span> <span class=\"nx\">AxiosInstance</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"k\">async</span> <span class=\"nx\">list</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">:</span> <span class=\"nx\">ListPostsService</span><span class=\"p\">.</span><span class=\"nx\">Params</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">ListPostsService</span><span class=\"p\">.</span><span class=\"nx\">Result</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">data</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">axiosInstance</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">&lt;</span><span class=\"nc\">Array</span><span class=\"err\">&lt;</span><span class=\"na\">Post</span><span class=\"p\">&gt;</span>&gt;('/posts', <span class=\"si\">{</span>\n      <span class=\"nx\">params</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nl\">page</span><span class=\"p\">:</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">page</span> <span class=\"p\">},</span>\n    <span class=\"si\">}</span>);\n\n    return data;\n  }\n}\n</code></pre>\n\n</div>\n\n\n\n<p>This is our implementation using Axios. We need the Axios instance in the constructor, and in the method <code>list</code> we make the request to our endpoint <code>/posts</code>.</p>\n\n<p>As we are already working on this service, let's also create a mocked version to use on the tests:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"k\">import</span> <span class=\"nx\">faker</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">faker</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">lodash</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">lodash</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ListPostsService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./list-posts-service</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">mockListPostsServicesResult</span> <span class=\"o\">=</span> <span class=\"p\">():</span> <span class=\"nx\">ListPostsService</span><span class=\"p\">.</span><span class=\"nx\">Result</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">lodash</span><span class=\"p\">.</span><span class=\"nx\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span>\n    <span class=\"nx\">id</span><span class=\"p\">,</span>\n    <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"nx\">faker</span><span class=\"p\">.</span><span class=\"nx\">lorem</span><span class=\"p\">.</span><span class=\"nx\">words</span><span class=\"p\">(),</span>\n    <span class=\"na\">content</span><span class=\"p\">:</span> <span class=\"nx\">faker</span><span class=\"p\">.</span><span class=\"nx\">lorem</span><span class=\"p\">.</span><span class=\"nx\">paragraphs</span><span class=\"p\">(),</span>\n    <span class=\"na\">imageUrl</span><span class=\"p\">:</span> <span class=\"nx\">faker</span><span class=\"p\">.</span><span class=\"nx\">internet</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">(),</span>\n  <span class=\"p\">}));</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">ListPostsServiceSpy</span> <span class=\"k\">implements</span> <span class=\"nx\">ListPostsService</span> <span class=\"p\">{</span>\n  <span class=\"nl\">params</span><span class=\"p\">:</span> <span class=\"nx\">ListPostsService</span><span class=\"p\">.</span><span class=\"nx\">Params</span><span class=\"p\">;</span>\n\n  <span class=\"nl\">result</span><span class=\"p\">:</span> <span class=\"nx\">ListPostsService</span><span class=\"p\">.</span><span class=\"nx\">Result</span> <span class=\"o\">=</span> <span class=\"nx\">mockListPostsServicesResult</span><span class=\"p\">();</span>\n\n  <span class=\"k\">async</span> <span class=\"nx\">list</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">:</span> <span class=\"nx\">ListPostsService</span><span class=\"p\">.</span><span class=\"nx\">Params</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">ListPostsService</span><span class=\"p\">.</span><span class=\"nx\">Result</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">params</span> <span class=\"o\">=</span> <span class=\"nx\">params</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>We just need to store in the class the params and a mocked result to test using Jest later. For the mocked data, I like to use the Faker.js library.</p>\n\n<h3>\n  <a href=\"#build-your-clean-component\">\n  </a>\n  Build your clean component\n</h3>\n\n<p>To manage all the loading and error states that we might need, I like to use the library React Query. You can read the documentation to get every detail on how to include it in your project. Basically you only need to add a custom provider wrapping your app, because the React Query also manages caches for the requests.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useQuery</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-query</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ListPostsService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../../services/definitions/list-posts-service</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">Pagination</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../Pagination/Pagination</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">PostCard</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../PostCard/PostCard</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">type</span> <span class=\"nx\">CleanBlogPostsProps</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">listPostsService</span><span class=\"p\">:</span> <span class=\"nx\">ListPostsService</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">CleanBlogPosts</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">FC</span><span class=\"o\">&lt;</span><span class=\"nx\">CleanBlogPostsProps</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">listPostsService</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">page</span><span class=\"p\">,</span> <span class=\"nx\">setPage</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"kr\">number</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span>\n    <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"nx\">posts</span><span class=\"p\">,</span>\n    <span class=\"nx\">isLoading</span><span class=\"p\">,</span>\n    <span class=\"nx\">isError</span><span class=\"p\">,</span>\n  <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">useQuery</span><span class=\"p\">([</span><span class=\"dl\">'</span><span class=\"s1\">posts</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">page</span><span class=\"p\">],</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">listPostsService</span><span class=\"p\">.</span><span class=\"nx\">list</span><span class=\"p\">({</span> <span class=\"nx\">page</span> <span class=\"p\">}),</span> <span class=\"p\">{</span> <span class=\"na\">initialData</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"p\">});</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">isLoading</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">data</span><span class=\"err\">-</span><span class=\"na\">testid</span><span class=\"p\">=</span><span class=\"s\">\"loading-posts\"</span><span class=\"p\">&gt;</span>Loading posts...<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">isError</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">data</span><span class=\"err\">-</span><span class=\"na\">testid</span><span class=\"p\">=</span><span class=\"s\">\"loading-posts-error\"</span><span class=\"p\">&gt;</span>There was an error trying to load the posts.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"si\">{</span><span class=\"nx\">posts</span><span class=\"o\">!</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">post</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n        <span class=\"p\">&lt;</span><span class=\"nc\">PostCard</span> <span class=\"na\">key</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">post</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"si\">}</span> <span class=\"na\">post</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">post</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">))</span><span class=\"si\">}</span>\n      <span class=\"p\">&lt;</span><span class=\"nc\">Pagination</span> <span class=\"na\">page</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">page</span><span class=\"si\">}</span> <span class=\"na\">onChangePage</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">setPage</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">CleanBlogPosts</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Do you see now how much cleaner it is? As a result of <code>useQuery</code> we have all the states that we need: our data, the loading and the error state. You don't need to use the <code>useEffect</code> for that anymore. The first parameter in <code>useQuery</code> can be a string or an array. When I include the <code>page</code> in this array, it means that the query will refetch using this new value (whenever the page changes, like in the <code>useEffect</code>).</p>\n\n<p>I also added some <code>data-testid</code> that will be used for testing. So, let's build it!</p>\n\n<h3>\n  <a href=\"#build-your-component-test\">\n  </a>\n  Build your component test\n</h3>\n\n<p>Our component required the <code>listPostsService</code>, so let's use the <code>ListPostsServiceSpy</code> that we created before. Using this we won't make a real HTTP request, because it's a \"fake service\".<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@testing-library/react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">reactQuery</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">UseQueryResult</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-query</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ListPostsServiceSpy</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../../services/definitions/mock-list-posts-service</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">CleanBlogPosts</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./CleanBlogPosts</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">type</span> <span class=\"nx\">SutTypes</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">listPostsServiceSpy</span><span class=\"p\">:</span> <span class=\"nx\">ListPostsServiceSpy</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">makeSut</span> <span class=\"o\">=</span> <span class=\"p\">():</span> <span class=\"nx\">SutTypes</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">listPostsServiceSpy</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ListPostsServiceSpy</span><span class=\"p\">();</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"nx\">listPostsServiceSpy</span><span class=\"p\">,</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">react-query</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span>\n  <span class=\"na\">useQuery</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n      <span class=\"na\">isLoading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"na\">isError</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">}));</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">CleanBlogPosts</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">should show loading state</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">listPostsServiceSpy</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">makeSut</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">reactQuery</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">useQuery</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">mockReturnValueOnce</span><span class=\"p\">({</span>\n      <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"nx\">listPostsServiceSpy</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">,</span>\n      <span class=\"na\">isLoading</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"na\">isError</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span> <span class=\"k\">as</span> <span class=\"kr\">any</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">CleanBlogPosts</span> <span class=\"na\">listPostsService</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">listPostsServiceSpy</span><span class=\"si\">}</span> <span class=\"p\">/&gt;);</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nx\">getByTestId</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">loading-posts</span><span class=\"dl\">'</span><span class=\"p\">)).</span><span class=\"nx\">toBeInTheDocument</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">should show error state</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">listPostsServiceSpy</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">makeSut</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">reactQuery</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">useQuery</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">mockReturnValueOnce</span><span class=\"p\">({</span>\n      <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"nx\">listPostsServiceSpy</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">,</span>\n      <span class=\"na\">isLoading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"na\">isError</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span> <span class=\"k\">as</span> <span class=\"kr\">any</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">CleanBlogPosts</span> <span class=\"na\">listPostsService</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">listPostsServiceSpy</span><span class=\"si\">}</span> <span class=\"p\">/&gt;);</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nx\">getByTestId</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">loading-posts-error</span><span class=\"dl\">'</span><span class=\"p\">)).</span><span class=\"nx\">toBeInTheDocument</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">should list the posts</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">listPostsServiceSpy</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">makeSut</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">reactQuery</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">useQuery</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">mockReturnValueOnce</span><span class=\"p\">({</span>\n      <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"nx\">listPostsServiceSpy</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">,</span>\n      <span class=\"na\">isLoading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"na\">isError</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span> <span class=\"k\">as</span> <span class=\"nx\">UseQueryResult</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">CleanBlogPosts</span> <span class=\"na\">listPostsService</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">listPostsServiceSpy</span><span class=\"si\">}</span> <span class=\"p\">/&gt;);</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">posts</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nx\">findAllByTestId</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">post-card</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">posts</span><span class=\"p\">).</span><span class=\"nx\">toHaveLength</span><span class=\"p\">(</span><span class=\"nx\">listPostsServiceSpy</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre>\n\n</div>\n\n\n\n<p>We added 3 tests:</p>\n\n<ul>\n<li>loading state: check if our <code>useQuery</code> returns the state <code>isLoading: true</code>, we will render the loading component.</li>\n<li>error state: check if our <code>useQuery</code> returns the state <code>isError: true</code>, we will render the error component.</li>\n<li>success: check if our <code>useQuery</code> returns the state <code>data</code>, we will render what we want (the list of posts cards). I also checked if we rendered the same amount of posts returned by our service.</li>\n</ul>\n\n<h3>\n  <a href=\"#conclusion\">\n  </a>\n  Conclusion\n</h3>\n\n<p>This is not \"the best solution for your API\". Each case might need a different solution. But I hope this helps you to see the alternatives for developing a better code.</p>\n\n<p>Another alternative is to create a custom hook called <code>useListPosts()</code> that will return the same state as <code>useQuery</code>, but you also decouple the React Query from your component and use your own implementation in order to create more tests.</p>\n\n<p>Unfortunately, it is not common to see automated tests in front-end code, it is rarely taught in courses. Now open your VSCode and try it :)</p>",
      "summary": "<p>This is a common problem that beginner React developers face when working on a new project. I will show here what you are doing and a method you can use to have a better and cleaner code (with tests!).</p>\n\n<p>Let's suppose that we are developing a new blog application that will render a simple list of posts based on the response of our API. Usually what we have is this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useEffect</span><span class=\"p\">,</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"nx\">axios</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">axios</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Post</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../../types/post</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">Pagination</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../Pagination/Pagination</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">PostCard</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../PostCard/PostCard</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">DirBlogPosts</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">FC</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">page</span><span class=\"p\">,</span> <span class=\"nx\">setPage</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"kr\">number</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">posts</span><span class=\"p\">,</span> <span class=\"nx\">setPosts</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">Post</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">([]);</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">isLoading</span><span class=\"p\">,</span> <span class=\"nx\">setIsLoading</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"nx\">boolean</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">isError</span><span class=\"p\">,</span> <span class=\"nx\">setIsError</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"nx\">boolean</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"p\">(</span><span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">try</span> <span class=\"p\">{</span>\n        <span class=\"nx\">setIsLoading</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n        <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">data</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">axios</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">&lt;</span><span class=\"nc\">Array</span><span class=\"err\">&lt;</span><span class=\"na\">Post</span><span class=\"p\">&gt;</span>&gt;('https://example.com/posts', <span class=\"si\">{</span>\n          <span class=\"nx\">params</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nx\">page</span> <span class=\"p\">},</span>\n        <span class=\"si\">}</span>);\n        setPosts(data);\n      } catch (error) <span class=\"si\">{</span>\n        <span class=\"nx\">setIsError</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n      <span class=\"si\">}</span> finally <span class=\"si\">{</span>\n        <span class=\"nx\">setIsLoading</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n      <span class=\"si\">}</span>\n    })();\n  }, [page]);\n\n  if (isLoading) <span class=\"si\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Loading posts...<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;;</span>\n  <span class=\"si\">}</span>\n\n  if (isError) <span class=\"si\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>There was an error trying to load the posts.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;;</span>\n  <span class=\"si\">}</span>\n\n  return (\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"si\">{</span><span class=\"nx\">posts</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">post</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n        <span class=\"p\">&lt;</span><span class=\"nc\">PostCard</span> <span class=\"na\">post</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">post</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">))</span><span class=\"si\">}</span>\n      <span class=\"p\">&lt;</span><span class=\"nc\">Pagination</span> <span class=\"na\">page</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">page</span><span class=\"si\">}</span> <span class=\"na\">onChangePage</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">setPage</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  );\n};\n\nexport default DirBlogPosts;\n</code></pre>\n\n</div>\n\n\n\n<p>Here we have the states <code>page</code>, <code>posts</code>, <code>isLoading</code> and <code>isError</code>. These states are updated when the component renders for the first time, or whenever the <code>page</code> is changed.</p>\n\n<p>Can you see the problem here?</p>\n\n<ol>\n<li>We have all the fetching logic inside our component;</li>\n<li>We need to control many states manually;</li>\n<li>It's hard to create automated tests.</li>\n</ol>\n\n<p>But we can try to follow a different approach and create a cleaner code.</p>\n\n<h2>\n  <a href=\"#build-your-service\">\n  </a>\n  Build your service\n</h2>\n\n<p>First of all, taking advantage of Typescript's features, let's define what is a post:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"c1\">// src/types/post.ts</span>\n<span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"nx\">Post</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">id</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"nl\">title</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">imageUrl</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">content</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n</code></pre>\n\n</div>\n\n\n\n<p>The post is basically an object with <code>id</code>, <code>title</code> , <code>imageUrl</code> and <code>content</code>.</p>\n\n<p>Now we can create the definition of our \"list posts service\":<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"c1\">// src/services/definitions/list-posts-service.ts</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Post</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../../types/post</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">ListPostsService</span> <span class=\"p\">{</span>\n  <span class=\"nx\">list</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">:</span> <span class=\"nx\">ListPostsService</span><span class=\"p\">.</span><span class=\"nx\">Params</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">ListPostsService</span><span class=\"p\">.</span><span class=\"nx\">Result</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">namespace</span> <span class=\"nx\">ListPostsService</span> <span class=\"p\">{</span>\n  <span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"nx\">Params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span><span class=\"p\">?:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"k\">export</span> <span class=\"kd\">type</span> <span class=\"nx\">Result</span> <span class=\"o\">=</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">Post</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Here we define that the \"list post service\" implementation should have a method called <code>list</code>, that will receive the defined params and return the defined result.</p>\n\n<p>Why have we created an interface for that?</p>\n\n<p>The answer is simple: our component will receive this service and execute it. The component doesn't even need to know if you will be using Axios or Fetch. Let's say your component will be agnostic. Sometime later you may need to change the Axios to Fetch, or even use Redux.</p>\n\n<p>So, let's build our Axios service implementation:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"c1\">// src/services/implementation/axios-list-posts-service.ts</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AxiosInstance</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">axios</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Post</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../../types/post</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ListPostsService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../definitions/list-posts-service</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">class</span> <span class=\"nx\">AxiosListPostsService</span> <span class=\"k\">implements</span> <span class=\"nx\">ListPostsService</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"k\">private</span> <span class=\"k\">readonly</span> <span class=\"nx\">axiosInstance</span><span class=\"p\">:</span> <span class=\"nx\">AxiosInstance</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"k\">async</span> <span class=\"nx\">list</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">:</span> <span class=\"nx\">ListPostsService</span><span class=\"p\">.</span><span class=\"nx\">Params</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">ListPostsService</span><span class=\"p\">.</span><span class=\"nx\">Result</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">data</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">axiosInstance</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">&lt;</span><span class=\"nc\">Array</span><span class=\"err\">&lt;</span><span class=\"na\">Post</span><span class=\"p\">&gt;</span>&gt;('/posts', <span class=\"si\">{</span>\n      <span class=\"nx\">params</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nl\">page</span><span class=\"p\">:</span> <span class=\"nx\">params</span><span class=\"p\">.</span><span class=\"nx\">page</span> <span class=\"p\">},</span>\n    <span class=\"si\">}</span>);\n\n    return data;\n  }\n}\n</code></pre>\n\n</div>\n\n\n\n<p>This is our implementation using Axios. We need the Axios instance in the constructor, and in the method <code>list</code> we make the request to our endpoint <code>/posts</code>.</p>\n\n<p>As we are already working on this service, let's also create a mocked version to use on the tests:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"k\">import</span> <span class=\"nx\">faker</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">faker</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">lodash</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">lodash</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ListPostsService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./list-posts-service</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">mockListPostsServicesResult</span> <span class=\"o\">=</span> <span class=\"p\">():</span> <span class=\"nx\">ListPostsService</span><span class=\"p\">.</span><span class=\"nx\">Result</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">lodash</span><span class=\"p\">.</span><span class=\"nx\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">id</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span>\n    <span class=\"nx\">id</span><span class=\"p\">,</span>\n    <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"nx\">faker</span><span class=\"p\">.</span><span class=\"nx\">lorem</span><span class=\"p\">.</span><span class=\"nx\">words</span><span class=\"p\">(),</span>\n    <span class=\"na\">content</span><span class=\"p\">:</span> <span class=\"nx\">faker</span><span class=\"p\">.</span><span class=\"nx\">lorem</span><span class=\"p\">.</span><span class=\"nx\">paragraphs</span><span class=\"p\">(),</span>\n    <span class=\"na\">imageUrl</span><span class=\"p\">:</span> <span class=\"nx\">faker</span><span class=\"p\">.</span><span class=\"nx\">internet</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">(),</span>\n  <span class=\"p\">}));</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">ListPostsServiceSpy</span> <span class=\"k\">implements</span> <span class=\"nx\">ListPostsService</span> <span class=\"p\">{</span>\n  <span class=\"nl\">params</span><span class=\"p\">:</span> <span class=\"nx\">ListPostsService</span><span class=\"p\">.</span><span class=\"nx\">Params</span><span class=\"p\">;</span>\n\n  <span class=\"nl\">result</span><span class=\"p\">:</span> <span class=\"nx\">ListPostsService</span><span class=\"p\">.</span><span class=\"nx\">Result</span> <span class=\"o\">=</span> <span class=\"nx\">mockListPostsServicesResult</span><span class=\"p\">();</span>\n\n  <span class=\"k\">async</span> <span class=\"nx\">list</span><span class=\"p\">(</span><span class=\"nx\">params</span><span class=\"p\">:</span> <span class=\"nx\">ListPostsService</span><span class=\"p\">.</span><span class=\"nx\">Params</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">ListPostsService</span><span class=\"p\">.</span><span class=\"nx\">Result</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">params</span> <span class=\"o\">=</span> <span class=\"nx\">params</span><span class=\"p\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n\n</div>\n\n\n\n<p>We just need to store in the class the params and a mocked result to test using Jest later. For the mocked data, I like to use the Faker.js library.</p>\n\n<h3>\n  <a href=\"#build-your-clean-component\">\n  </a>\n  Build your clean component\n</h3>\n\n<p>To manage all the loading and error states that we might need, I like to use the library React Query. You can read the documentation to get every detail on how to include it in your project. Basically you only need to add a custom provider wrapping your app, because the React Query also manages caches for the requests.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useQuery</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-query</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ListPostsService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../../services/definitions/list-posts-service</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">Pagination</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../Pagination/Pagination</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">PostCard</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../PostCard/PostCard</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">type</span> <span class=\"nx\">CleanBlogPostsProps</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">listPostsService</span><span class=\"p\">:</span> <span class=\"nx\">ListPostsService</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">CleanBlogPosts</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">FC</span><span class=\"o\">&lt;</span><span class=\"nx\">CleanBlogPostsProps</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">listPostsService</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">page</span><span class=\"p\">,</span> <span class=\"nx\">setPage</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"kr\">number</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span>\n    <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"nx\">posts</span><span class=\"p\">,</span>\n    <span class=\"nx\">isLoading</span><span class=\"p\">,</span>\n    <span class=\"nx\">isError</span><span class=\"p\">,</span>\n  <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">useQuery</span><span class=\"p\">([</span><span class=\"dl\">'</span><span class=\"s1\">posts</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"nx\">page</span><span class=\"p\">],</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">listPostsService</span><span class=\"p\">.</span><span class=\"nx\">list</span><span class=\"p\">({</span> <span class=\"nx\">page</span> <span class=\"p\">}),</span> <span class=\"p\">{</span> <span class=\"na\">initialData</span><span class=\"p\">:</span> <span class=\"p\">[]</span> <span class=\"p\">});</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">isLoading</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">data</span><span class=\"err\">-</span><span class=\"na\">testid</span><span class=\"p\">=</span><span class=\"s\">\"loading-posts\"</span><span class=\"p\">&gt;</span>Loading posts...<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">isError</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">data</span><span class=\"err\">-</span><span class=\"na\">testid</span><span class=\"p\">=</span><span class=\"s\">\"loading-posts-error\"</span><span class=\"p\">&gt;</span>There was an error trying to load the posts.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"si\">{</span><span class=\"nx\">posts</span><span class=\"o\">!</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">post</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n        <span class=\"p\">&lt;</span><span class=\"nc\">PostCard</span> <span class=\"na\">key</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">post</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"si\">}</span> <span class=\"na\">post</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">post</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">))</span><span class=\"si\">}</span>\n      <span class=\"p\">&lt;</span><span class=\"nc\">Pagination</span> <span class=\"na\">page</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">page</span><span class=\"si\">}</span> <span class=\"na\">onChangePage</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">setPage</span><span class=\"si\">}</span> <span class=\"p\">/&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">CleanBlogPosts</span><span class=\"p\">;</span>\n</code></pre>\n\n</div>\n\n\n\n<p>Do you see now how much cleaner it is? As a result of <code>useQuery</code> we have all the states that we need: our data, the loading and the error state. You don't need to use the <code>useEffect</code> for that anymore. The first parameter in <code>useQuery</code> can be a string or an array. When I include the <code>page</code> in this array, it means that the query will refetch using this new value (whenever the page changes, like in the <code>useEffect</code>).</p>\n\n<p>I also added some <code>data-testid</code> that will be used for testing. So, let's build it!</p>\n\n<h3>\n  <a href=\"#build-your-component-test\">\n  </a>\n  Build your component test\n</h3>\n\n<p>Our component required the <code>listPostsService</code>, so let's use the <code>ListPostsServiceSpy</code> that we created before. Using this we won't make a real HTTP request, because it's a \"fake service\".<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">screen</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">@testing-library/react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">reactQuery</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">UseQueryResult</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react-query</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ListPostsServiceSpy</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">../../services/definitions/mock-list-posts-service</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">CleanBlogPosts</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./CleanBlogPosts</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">type</span> <span class=\"nx\">SutTypes</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">listPostsServiceSpy</span><span class=\"p\">:</span> <span class=\"nx\">ListPostsServiceSpy</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">makeSut</span> <span class=\"o\">=</span> <span class=\"p\">():</span> <span class=\"nx\">SutTypes</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">listPostsServiceSpy</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ListPostsServiceSpy</span><span class=\"p\">();</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">{</span>\n    <span class=\"nx\">listPostsServiceSpy</span><span class=\"p\">,</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">mock</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">react-query</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">({</span>\n  <span class=\"na\">useQuery</span><span class=\"p\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n      <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n      <span class=\"na\">isLoading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"na\">isError</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"p\">};</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">}));</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">CleanBlogPosts</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">should show loading state</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">listPostsServiceSpy</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">makeSut</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">reactQuery</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">useQuery</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">mockReturnValueOnce</span><span class=\"p\">({</span>\n      <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"nx\">listPostsServiceSpy</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">,</span>\n      <span class=\"na\">isLoading</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n      <span class=\"na\">isError</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span> <span class=\"k\">as</span> <span class=\"kr\">any</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">CleanBlogPosts</span> <span class=\"na\">listPostsService</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">listPostsServiceSpy</span><span class=\"si\">}</span> <span class=\"p\">/&gt;);</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nx\">getByTestId</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">loading-posts</span><span class=\"dl\">'</span><span class=\"p\">)).</span><span class=\"nx\">toBeInTheDocument</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">should show error state</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">listPostsServiceSpy</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">makeSut</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">reactQuery</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">useQuery</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">mockReturnValueOnce</span><span class=\"p\">({</span>\n      <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"nx\">listPostsServiceSpy</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">,</span>\n      <span class=\"na\">isLoading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"na\">isError</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span> <span class=\"k\">as</span> <span class=\"kr\">any</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">CleanBlogPosts</span> <span class=\"na\">listPostsService</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">listPostsServiceSpy</span><span class=\"si\">}</span> <span class=\"p\">/&gt;);</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nx\">getByTestId</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">loading-posts-error</span><span class=\"dl\">'</span><span class=\"p\">)).</span><span class=\"nx\">toBeInTheDocument</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">should list the posts</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"nx\">listPostsServiceSpy</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">makeSut</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">jest</span><span class=\"p\">.</span><span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">reactQuery</span><span class=\"p\">,</span> <span class=\"dl\">'</span><span class=\"s1\">useQuery</span><span class=\"dl\">'</span><span class=\"p\">).</span><span class=\"nx\">mockReturnValueOnce</span><span class=\"p\">({</span>\n      <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"nx\">listPostsServiceSpy</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">,</span>\n      <span class=\"na\">isLoading</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n      <span class=\"na\">isError</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span> <span class=\"k\">as</span> <span class=\"nx\">UseQueryResult</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">CleanBlogPosts</span> <span class=\"na\">listPostsService</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"nx\">listPostsServiceSpy</span><span class=\"si\">}</span> <span class=\"p\">/&gt;);</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">posts</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nx\">findAllByTestId</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">post-card</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">posts</span><span class=\"p\">).</span><span class=\"nx\">toHaveLength</span><span class=\"p\">(</span><span class=\"nx\">listPostsServiceSpy</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre>\n\n</div>\n\n\n\n<p>We added 3 tests:</p>\n\n<ul>\n<li>loading state: check if our <code>useQuery</code> returns the state <code>isLoading: true</code>, we will render the loading component.</li>\n<li>error state: check if our <code>useQuery</code> returns the state <code>isError: true</code>, we will render the error component.</li>\n<li>success: check if our <code>useQuery</code> returns the state <code>data</code>, we will render what we want (the list of posts cards). I also checked if we rendered the same amount of posts returned by our service.</li>\n</ul>\n\n<h3>\n  <a href=\"#conclusion\">\n  </a>\n  Conclusion\n</h3>\n\n<p>This is not \"the best solution for your API\". Each case might need a different solution. But I hope this helps you to see the alternatives for developing a better code.</p>\n\n<p>Another alternative is to create a custom hook called <code>useListPosts()</code> that will return the same state as <code>useQuery</code>, but you also decouple the React Query from your component and use your own implementation in order to create more tests.</p>\n\n<p>Unfortunately, it is not common to see automated tests in front-end code, it is rarely taught in courses. Now open your VSCode and try it :)</p>",
      "date_published": "2021-11-07T02:51:54.000Z",
      "author": {
        "name": "Elias Júnior"
      }
    },
    {
      "guid": "https://dev.to/fabcovalesci/o-que-e-o-pyenv--8p",
      "url": "https://dev.to/fabcovalesci/o-que-e-o-pyenv--8p",
      "title": "O que é o pyenv ?",
      "content_html": "<p>O <a href=\"https://github.com/pyenv/pyenv\">pyenv</a> é um gerenciador de versões do python, com ele é possivel utilizar diversas versões do interpretador.</p>\n\n<p>A grande vantagem de se usar o pyenv, é a facilidade de criar ambientes rapidamente.</p>\n\n<p>Veja abaixo como instalar e utilizar o pyenv.</p>\n\n<p>Instalação:</p>\n\n<p>Todos os comandos abaixo estão disponiveis no repositório oficial, que pode ser acessado aqui.<a href=\"https://github.com/pyenv/pyenv\">aqui</a></p>\n\n<p>Como sugere a <a href=\"https://github.com/pyenv/pyenv/wiki\">documentação do pyenv</a>, é necessário a instalação de algumas dependências:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>sudo apt-get update\n\nsudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev git\n</code></pre>\n\n</div>\n\n\n\n<p>Instalar o pyenv:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>curl https://pyenv.run | bash\n</code></pre>\n\n</div>\n\n\n\n<p>Configurar as variaveis de ambiente<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>export PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n</code></pre>\n\n</div>\n\n\n\n<p>Reinicia o terminal<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>exec $SHELL \n</code></pre>\n\n</div>\n\n\n\n<p><strong>Usando o pyenv</strong></p>\n\n<p>Verifique a versão que seu sistema operacional está utilizando:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>python -V\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--DvgEDP6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pzj9sp2xb15ki02alvr.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--DvgEDP6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pzj9sp2xb15ki02alvr.png\" alt=\"Image description\" width=\"605\" height=\"68\"></a></p>\n\n<p>Para procurar uma versão especifica é necessário apenas digitar o comando abaixo:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>pyenv install -l\n</code></pre>\n\n</div>\n\n\n\n<p>Após escolher a versão é preciso instalar, com o comando:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>pyenv install &lt;versão-escolhida-aqui-EX: '3.9.7'&gt;\n</code></pre>\n\n</div>\n\n\n\n<p>Para listar as todas as versões que foram instaladas na sua máquina, digite:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>pyenv versions\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2orCULEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a56ewq38cpw5umvctl2s.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2orCULEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a56ewq38cpw5umvctl2s.png\" alt=\"Image description\" width=\"487\" height=\"93\"></a></p>\n\n<p>Para definir a versão nova em seu sistema operacional, o comando “pyenv global” seguido da versão:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>pyenv global 3.9.7\n</code></pre>\n\n</div>\n\n\n\n<p>Para desinstalar uma versão especifica o comando “pyenv uninstall” seguindo da versão:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>pyenv uninstall 3.9.7\n</code></pre>\n\n</div>\n\n\n\n<p>Este foi um breve tutorial sobre <strong>pyenv</strong>, que pode ser muito útil, quando se esta trabalhando varios projetos com versões diferentes.</p>",
      "summary": "<p>O <a href=\"https://github.com/pyenv/pyenv\">pyenv</a> é um gerenciador de versões do python, com ele é possivel utilizar diversas versões do interpretador.</p>\n\n<p>A grande vantagem de se usar o pyenv, é a facilidade de criar ambientes rapidamente.</p>\n\n<p>Veja abaixo como instalar e utilizar o pyenv.</p>\n\n<p>Instalação:</p>\n\n<p>Todos os comandos abaixo estão disponiveis no repositório oficial, que pode ser acessado aqui.<a href=\"https://github.com/pyenv/pyenv\">aqui</a></p>\n\n<p>Como sugere a <a href=\"https://github.com/pyenv/pyenv/wiki\">documentação do pyenv</a>, é necessário a instalação de algumas dependências:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>sudo apt-get update\n\nsudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev git\n</code></pre>\n\n</div>\n\n\n\n<p>Instalar o pyenv:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>curl https://pyenv.run | bash\n</code></pre>\n\n</div>\n\n\n\n<p>Configurar as variaveis de ambiente<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>export PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init -)\"\neval \"$(pyenv virtualenv-init -)\"\n</code></pre>\n\n</div>\n\n\n\n<p>Reinicia o terminal<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>exec $SHELL \n</code></pre>\n\n</div>\n\n\n\n<p><strong>Usando o pyenv</strong></p>\n\n<p>Verifique a versão que seu sistema operacional está utilizando:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>python -V\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--DvgEDP6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pzj9sp2xb15ki02alvr.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--DvgEDP6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3pzj9sp2xb15ki02alvr.png\" alt=\"Image description\" width=\"605\" height=\"68\"></a></p>\n\n<p>Para procurar uma versão especifica é necessário apenas digitar o comando abaixo:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>pyenv install -l\n</code></pre>\n\n</div>\n\n\n\n<p>Após escolher a versão é preciso instalar, com o comando:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>pyenv install &lt;versão-escolhida-aqui-EX: '3.9.7'&gt;\n</code></pre>\n\n</div>\n\n\n\n<p>Para listar as todas as versões que foram instaladas na sua máquina, digite:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>pyenv versions\n</code></pre>\n\n</div>\n\n\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2orCULEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a56ewq38cpw5umvctl2s.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--2orCULEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a56ewq38cpw5umvctl2s.png\" alt=\"Image description\" width=\"487\" height=\"93\"></a></p>\n\n<p>Para definir a versão nova em seu sistema operacional, o comando “pyenv global” seguido da versão:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>pyenv global 3.9.7\n</code></pre>\n\n</div>\n\n\n\n<p>Para desinstalar uma versão especifica o comando “pyenv uninstall” seguindo da versão:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>pyenv uninstall 3.9.7\n</code></pre>\n\n</div>\n\n\n\n<p>Este foi um breve tutorial sobre <strong>pyenv</strong>, que pode ser muito útil, quando se esta trabalhando varios projetos com versões diferentes.</p>",
      "date_published": "2021-11-07T02:48:21.000Z",
      "author": {
        "name": "Fabrício"
      }
    }
  ]
}